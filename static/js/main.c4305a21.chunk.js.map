{"version":3,"sources":["components/NavMenu.tsx","components/Layout.tsx","components/Home.tsx","components/Table.tsx","models/Comparer.ts","components/Chart.tsx","components/Summary.tsx","components/Stats.tsx","components/About.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NavMenu","props","toggleNavbar","bind","state","collapsed","this","setState","Navbar","className","light","Container","NavbarBrand","tag","Link","to","src","height","alt","NavbarToggler","onClick","Collapse","isOpen","navbar","NavItem","NavLink","Component","displayName","name","Layout","children","Home","href","target","rel","Table","tableFuncs","x","trackName","artistName","tableData","from","listeningHistory","groupBy","tableFuncId","select","first","playedTimes","count","totalListeningTime","Math","round","sum","msPlayed","toArray","Fragment","ButtonGroup","style","marginBottom","Button","active","color","data","columns","Header","accessor","filter","defaultSorted","id","desc","defaultPageSize","Comparer","y","Chart","chartFuncs","getHours","getDay","getFullYear","getMonth","daysOfWeek","xAxisFuncs","floor","chartData","chartFuncId","date","g","key","totalTime","totalPlaybacks","mostPlayedTrack","orderByDescending","mostPlayedArtist","width","margin","top","right","left","bottom","strokeDasharray","dataKey","content","CustomTooltip","type","stroke","payload","label","Summary","totalPlayCount","differentTracks","distinct","differentArtists","top10TracksPlayCount","take","top10ArtistsPlayCount","summary","totalListeningTimeMinutes","totalListeningTimeSummary","top10tracksShare","top10artistsShare","fontSize","Stats","loadFiles","files","forEach","f","startsWith","fileReader","FileReader","onloadend","e","ls","JSON","parse","result","Date","endTime","replace","readAsText","length","onDrop","getRootProps","getInputProps","About","title","App","baseUrl","document","getElementsByTagName","getAttribute","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c4305a21.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport './NavMenu.css';\n\nexport interface NavMenuProps {\n\n}\n\nexport interface NavMenuState {\n  collapsed: boolean;\n}\n\nexport class NavMenu extends Component<NavMenuProps, NavMenuState> {\n  static displayName = NavMenu.name;\n\n  constructor (props: Readonly<NavMenuProps>) {\n    super(props);\n\n    this.toggleNavbar = this.toggleNavbar.bind(this);\n    this.state = {\n      collapsed: true\n    };\n  }\n\n  toggleNavbar () {\n    this.setState({\n      collapsed: !this.state.collapsed\n    });\n  }\n\n  render () {\n    return (\n      <header>\n        <Navbar className=\"navbar-expand-sm navbar-toggleable-sm ng-white border-bottom box-shadow mb-3\" light>\n          <Container>\n            <NavbarBrand tag={Link} to=\"/\"><img src='./logo192.png' height=\"40px\" alt=\"Logo\" /> Your Spotify Stats</NavbarBrand>\n            <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\n            <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={!this.state.collapsed} navbar>\n              <ul className=\"navbar-nav flex-grow\">\n                <NavItem>\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/\">Instructions</NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/stats\">Stats</NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/about\">About</NavLink>\n                </NavItem>\n              </ul>\n            </Collapse>\n          </Container>\n        </Navbar>\n      </header>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Container } from 'reactstrap';\nimport { NavMenu } from './NavMenu';\n\nexport class Layout extends Component {\n  static displayName = Layout.name;\n\n  render () {\n    return (\n      <div>\n        <NavMenu />\n        <Container>\n          {this.props.children}\n        </Container>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nexport class Home extends Component {\n  static displayName = Home.name;\n\n  render () {\n    return (\n      <div>\n        <h1>How to use it</h1>\n        <ol className=\"instructions\">\n          <li>Go to <a href=\"https://www.spotify.com/en/account/privacy/\" target=\"_blank\" rel=\"noopener noreferrer\">Spotify privacy settings</a> and scroll down</li>\n          <li>Request a copy of your data</li>\n          <li>Wait a couple of days</li>\n          <li>Check your inbox and download the data</li>\n          <li>Unzip and add your <i>StreamingHistory#.json</i> files <Link to=\"/stats\">HERE</Link></li>\n        </ol>\n      </div>\n    );\n  }\n}\n","import { Component } from \"react\";\nimport { ListeningEntry } from \"../models/listeningEntry\";\nimport { from } from \"linq-to-typescript\";\nimport React from \"react\";\nimport { ButtonGroup, Button } from \"reactstrap\";\nimport ReactTable from \"react-table-6\";\nimport \"react-table-6/react-table.css\";\n\ninterface TabProps {\n  listeningHistory: ListeningEntry[];\n}\n\ninterface TabState {\n  tableFuncId: number;\n}\n\nexport class Table extends Component<TabProps, TabState> {\n  tableFuncs = [(x: ListeningEntry) => x.trackName + x.artistName, (x: ListeningEntry) => x.artistName]\n\n  constructor(props: Readonly<TabProps>) {\n    super(props);\n    this.state = { tableFuncId: 0 };\n  }\n\n  tableData = () => from(this.props.listeningHistory)\n    .groupBy(this.tableFuncs[this.state.tableFuncId])\n    .select(x => {\n      return {\n        trackName: x.first().trackName,\n        artistName: x.first().artistName,\n        playedTimes: x.count(),\n        totalListeningTime: Math.round(x.sum(x => x.msPlayed) / 60000)\n      }\n    })\n    .toArray();\n\n  render() {\n    return (\n      <React.Fragment>\n\n        <ButtonGroup className=\"d-flex\" style={{ marginBottom: 20 }}>\n          <Button active={this.state.tableFuncId === 0} color=\"primary\" onClick={() => this.setState({ ...this.state, tableFuncId: 0 })}>Favourite tracks</Button>\n          <Button active={this.state.tableFuncId === 1} color=\"primary\" onClick={() => this.setState({ ...this.state, tableFuncId: 1 })}>Favourite artists</Button>\n        </ButtonGroup>\n\n        <ReactTable\n          data={this.tableData()}\n          columns={[\n            {\n              Header: \"Artist Name\",\n              accessor: \"artistName\"\n            },\n            {\n              Header: \"Track Name\",\n              accessor: \"trackName\"\n            },\n            {\n              Header: \"Play Count\",\n              accessor: \"playedTimes\"\n            },\n            {\n              Header: \"Listening Time (minutes)\",\n              accessor: \"totalListeningTime\"\n            }\n          ].filter(x => this.state.tableFuncId === 0 ? true : x.accessor !== \"trackName\")}\n          defaultSorted={[\n            {\n              id: \"playedTimes\",\n              desc: true\n            }\n          ]}\n          defaultPageSize={20}\n          className=\"-striped -highlight\"\n        />\n      </React.Fragment>\n    )\n  }\n\n}","const Comparer = (x: number, y: number): number => {\n  return x < y ? -1 : x === y ? 0 : 1;\n}\n\nexport default Comparer;","import { Component } from \"react\";\nimport React from \"react\";\nimport { ButtonGroup, Button } from \"reactstrap\";\nimport { LineChart, CartesianGrid, XAxis, YAxis, Line, Tooltip, ResponsiveContainer } from \"recharts\";\nimport { ListeningEntry } from \"../models/listeningEntry\";\nimport { from } from \"linq-to-typescript\";\nimport Comparer from \"../models/Comparer\";\n\nexport interface ChartProps {\n  listeningHistory: ListeningEntry[];\n}\n\ninterface ChartState {\n  chartFuncId: number;\n}\n\nexport class Chart extends Component<ChartProps, ChartState> {\n  chartFuncs: ((x: Date) => number)[] = [\n    x => x.getHours(),\n    x => x.getDay() === 0 ? 7 : x.getDay(),\n    x => x.getFullYear() * 100 + x.getMonth() + 1\n  ];\n\n  daysOfWeek: string[] = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n  xAxisFuncs: ((x: { name: number }) => string)[] = [\n    x => x.name + \"\",\n    x => this.daysOfWeek[x.name],\n    x => x.name % 100 + \"-\" + Math.floor(x.name / 100)\n  ];\n\n  constructor(props: Readonly<ChartProps>) {\n    super(props);\n    this.state = { chartFuncId: 0 };\n  }\n\n\n  chartData = () => from(this.props.listeningHistory)\n    .groupBy(x => this.chartFuncs[this.state.chartFuncId](x.date))\n    .select(g => ({\n      name: g.key,\n      totalTime: Math.round(g.sum(x => x.msPlayed) / 60000),\n      totalPlaybacks: g.count(),\n      mostPlayedTrack: g.groupBy(x => x.trackName).orderByDescending(x => x.count(), Comparer).first().key,\n      mostPlayedArtist: g.groupBy(x => x.artistName).orderByDescending(x => x.count(), Comparer).first().key\n    }))\n    .toArray();\n\n  render() {\n    return (\n      <React.Fragment>\n        <ButtonGroup className=\"d-flex\">\n          <Button active={this.state.chartFuncId === 0} color=\"primary\" onClick={() => this.setState({ ...this.state, chartFuncId: 0 })}>Hours</Button>\n          <Button active={this.state.chartFuncId === 1} color=\"primary\" onClick={() => this.setState({ ...this.state, chartFuncId: 1 })}>Days of week</Button>\n          <Button active={this.state.chartFuncId === 2} color=\"primary\" onClick={() => this.setState({ ...this.state, chartFuncId: 2 })}>Months</Button>\n        </ButtonGroup>\n        <ResponsiveContainer width=\"100%\" height={500}>\n          <LineChart\n            data={this.chartData()}\n            margin={{\n              top: 25, right: 20, left: 20, bottom: 50,\n            }}\n          >\n            <CartesianGrid strokeDasharray=\"5 5\" />\n            <XAxis dataKey={this.xAxisFuncs[this.state.chartFuncId]} />\n            <YAxis />\n            <Tooltip content={CustomTooltip} />\n            <Line type=\"monotone\" dataKey=\"totalTime\" stroke=\"#8884d8\" />\n          </LineChart>\n        </ResponsiveContainer>\n      </React.Fragment >);\n  }\n}\n\nconst CustomTooltip = ({ active, payload, label }: any) => {\n  if (active && payload) {\n    return (\n      <div className=\"custom-tooltip\">\n        <p className=\"label\">{`Total listening time: ${payload[0].payload.totalTime} minutes`}</p>\n        <p className=\"desc\">Total tracks played: {payload[0].payload.totalPlaybacks}<br />\n          Favourite track: {payload[0].payload.mostPlayedTrack}<br />\n          Favourite artist: {payload[0].payload.mostPlayedArtist}<br />\n        </p>\n      </div>\n    );\n  }\n\n  return null;\n};\n","import React from \"react\";\nimport { ListeningEntry } from \"../models/listeningEntry\";\nimport { from } from \"linq-to-typescript\";\nimport Comparer from \"../models/Comparer\";\n\nconst Summary: React.FC<{ listeningHistory: ListeningEntry[] }> = (props) => {\n  const data = from(props.listeningHistory);\n\n  const totalListeningTime = Math.round(data.sum(x => x.msPlayed) / 60000);\n  const totalPlayCount = data.count();\n\n  const differentTracks = data.select(x => x.artistName + x.trackName).distinct().count();\n  const differentArtists = data.select(x => x.artistName).distinct().count();\n\n  const top10TracksPlayCount = data.groupBy(x => x.trackName + x.artistName)\n    .select(x => x.count())\n    .orderByDescending(x => x, Comparer)\n    .take(Math.round(differentTracks / 10))\n    .sum();\n\n  const top10ArtistsPlayCount = data.groupBy(x => x.artistName)\n    .select(x => x.count())\n    .orderByDescending(x => x)\n    .take(Math.round(differentArtists / 10))\n    .sum();\n\n  const summary = {\n    totalListeningTimeMinutes: totalListeningTime,\n    totalListeningTimeSummary: `${Math.floor(totalListeningTime / 1440)} days, ${Math.floor(totalListeningTime / 60 % 24)} hours and ${Math.floor(totalListeningTime % 60)} minutes`,\n    totalPlayCount: totalPlayCount,\n    differentTracks: differentTracks,\n    differentArtists: differentArtists,\n    top10tracksShare: top10TracksPlayCount / totalPlayCount,\n    top10artistsShare: top10ArtistsPlayCount / totalPlayCount\n  };\n\n  return (\n    <React.Fragment>\n      <p className=\"text-center\" style={{ fontSize: \"x-large\", marginBottom: 100 }}>\n        In the last year you've listened to <br />\n        <span className=\"display-2\">{summary.totalPlayCount} tracks</span>  <br />\n        for a total of <br /><span className=\"display-2\">{summary.totalListeningTimeMinutes} minutes</span>  <br />\n        or <span className=\"display-3\"> {summary.totalListeningTimeSummary}</span>. <br />\n        <br />\n        There are <span className=\"display-4\">{summary.differentTracks}</span> different tracks<br />\n        and <span className=\"display-4\">{summary.differentArtists}</span> different artists in your streaming history. <br />\n        <br />\n        Your top 10% artists and tracks are responsible respectively for <span className=\"display-3\">{Math.round(summary.top10artistsShare * 1000) / 10}% </span> <br />\n        and <span className=\"display-3\">{Math.round(summary.top10tracksShare * 1000) / 10}% </span> of all your streams.\n      </p>\n    </React.Fragment >\n  );\n}\n\nexport default Summary;","import React, { Component } from 'react';\nimport Dropzone from 'react-dropzone';\nimport { ListeningEntry } from '../models/listeningEntry';\nimport { Table } from './Table';\nimport { Chart } from './Chart';\nimport Summary from './Summary';\n\nexport interface StatsProps {\n}\n\nexport interface StatsState {\n  listeningHistory: ListeningEntry[];\n}\n\nexport class Stats extends Component<StatsProps, StatsState> {\n  static displayName = Stats.name;\n\n  constructor(props: Readonly<StatsProps>) {\n    super(props);\n    this.state = { listeningHistory: [] };\n  }\n\n  loadFiles = (files: File[]) => {\n    this.setState({ ...this.state, listeningHistory: [] }, () => {\n      files.forEach(f => {\n        if (!f.name.startsWith(\"StreamingHistory\")) return;\n\n        let fileReader = new FileReader();\n        fileReader.onloadend = (e) => {\n          let ls: ListeningEntry[] = JSON.parse(fileReader.result as string);\n          ls = ls.filter((x: ListeningEntry) => x.msPlayed > 60000 && x.msPlayed < 600000);\n          ls.forEach(x => x.date = new Date(x.endTime.replace(\" \", \"T\") + \":00.000Z\"));\n          this.setState({ ...this.state, listeningHistory: [...this.state.listeningHistory, ...ls] });\n        }\n\n        fileReader.readAsText(f);\n      });\n    });\n  }\n\n  render() {\n    return this.state.listeningHistory.length === 0\n      ? (\n        <Dropzone onDrop={this.loadFiles}>\n          {({ getRootProps, getInputProps }) => (\n            <section>\n              <div {...getRootProps({ className: 'dropzone' })}>\n                <input {...getInputProps()} />\n                <p>Drag and drop your StreamingHistory#.json files here, or click to select files</p>\n              </div>\n            </section>\n          )}\n        </Dropzone>\n      ) : (\n        <React.Fragment>\n          <Summary listeningHistory={this.state.listeningHistory} />\n          <Chart listeningHistory={this.state.listeningHistory} />\n          <Table listeningHistory={this.state.listeningHistory} />\n        </React.Fragment>\n      );\n  }\n}\n","import React from 'react';\n\nconst About: React.FC = () => {\n    return (\n        <div>\n            <h1>About</h1>\n            <p>This app is made for fun and as a training. None of your data is stored, everything is processed locally. It is not related to Spotify AB or any of it´s partners in any way.</p>\n            <div>Icons made by <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\n        </div>\n    );\n\n}\n\nexport default About;","import React from 'react';\nimport './App.css';\nimport { Layout } from './components/Layout';\nimport { Route } from 'react-router';\nimport { Home } from './components/Home';\nimport { Stats } from './components/Stats';\nimport { HashRouter } from 'react-router-dom';\nimport About from './components/About';\n\nconst App: React.FC = () => {\n  const baseUrl = document.getElementsByTagName('base')[0].getAttribute('href') as string;\n\n  return (\n    <HashRouter basename={baseUrl}>\n      <Layout>\n        <Route exact path='/' component={Home} />\n        <Route path='/stats' component={Stats} />\n        <Route path='/about' component={About} />\n      </Layout>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}