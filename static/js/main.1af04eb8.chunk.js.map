{"version":3,"sources":["components/NavMenu.tsx","components/Layout.tsx","components/Home.tsx","models/Comparer.ts","components/Table.tsx","components/Chart.tsx","components/Summary.tsx","components/OtherUnits.tsx","components/Attachment.tsx","components/Stats.tsx","components/About.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NavMenu","props","toggleNavbar","bind","state","collapsed","this","setState","Navbar","className","light","Container","NavbarBrand","tag","Link","to","src","height","alt","NavbarToggler","onClick","Collapse","isOpen","navbar","NavItem","NavLink","Component","displayName","name","Layout","children","Home","href","target","rel","Comparer","x","y","Table","tableFuncs","trackName","artistName","tableData","result","from","listeningHistory","groupBy","tableFuncId","select","count","sum","t","msPlayed","orderByDescending","thenByDescending","i","id","first","playedTimes","totalListeningTime","Math","round","where","toLowerCase","indexOf","searchPhrase","orderByColumn","orderBy","descendingOrder","reverse","toArray","orderByChanged","column","typeChanged","type","data","columns","header","selector","style","flex","display","Row","index","map","key","CustomScrollbars","onScroll","forwardedRef","refSetter","useCallback","scrollbarsRef","view","ref","overflow","CustomScrollbarsVirtualList","React","forwardRef","Fragment","placeholder","borderRadius","onChange","e","value","length","ButtonGroup","size","Button","active","color","itemCount","itemSize","width","outerElementType","Chart","chartFuncs","getHours","getDay","getFullYear","getMonth","daysOfWeek","xAxisFuncs","floor","chartData","chartFuncId","date","g","totalTime","totalPlaybacks","mostPlayedTrack","mostPlayedArtist","strokeDasharray","dataKey","content","CustomTooltip","stroke","strokeWidth","payload","label","Summary","totalPlayCount","differentTracks","distinct","differentArtists","top10TracksPlayCount","take","top10ArtistsPlayCount","summary","totalListeningTimeMinutes","totalListeningTimeSummary","top10tracksShare","top10artistsShare","fontSize","OtherUnits","precision","pow","toLocaleString","fontWeight","Attachment","topTracksPlayCount","aggregate","Array","push","topArtistsPlayCount","top","Tracks","Artists","dot","Stats","loadFiles","files","loadedFiles","filesToLoad","filter","startsWith","progress","forEach","f","fileReader","FileReader","onloadend","ls","JSON","parse","Date","endTime","replace","document","getElementById","scrollIntoView","readAsText","onDrop","getRootProps","getInputProps","About","title","App","baseUrl","getElementsByTagName","getAttribute","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1af04eb8.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport './NavMenu.css';\n\nexport interface NavMenuProps {\n\n}\n\nexport interface NavMenuState {\n  collapsed: boolean;\n}\n\nexport class NavMenu extends Component<NavMenuProps, NavMenuState> {\n  static displayName = NavMenu.name;\n\n  constructor (props: Readonly<NavMenuProps>) {\n    super(props);\n\n    this.toggleNavbar = this.toggleNavbar.bind(this);\n    this.state = {\n      collapsed: true\n    };\n  }\n\n  toggleNavbar () {\n    this.setState({\n      collapsed: !this.state.collapsed\n    });\n  }\n\n  render () {\n    return (\n      <header>\n        <Navbar className=\"navbar-expand-sm navbar-toggleable-sm ng-white border-bottom box-shadow mb-3\" light>\n          <Container>\n            <NavbarBrand tag={Link} to=\"/\"><img src='./logo192.png' height=\"40px\" alt=\"Logo\" /> Your Spotify Stats</NavbarBrand>\n            <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\n            <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={!this.state.collapsed} navbar>\n              <ul className=\"navbar-nav flex-grow\">\n                <NavItem>\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/\">Instructions</NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/stats\">Stats</NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/about\">About</NavLink>\n                </NavItem>\n              </ul>\n            </Collapse>\n          </Container>\n        </Navbar>\n      </header>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Container } from 'reactstrap';\nimport { NavMenu } from './NavMenu';\n\nexport class Layout extends Component {\n  static displayName = Layout.name;\n\n  render () {\n    return (\n      <div>\n        <NavMenu />\n        <Container>\n          {this.props.children}\n        </Container>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nexport class Home extends Component {\n  static displayName = Home.name;\n\n  render () {\n    return (\n      <div>\n        <h1>How to use it</h1>\n        <ol className=\"instructions\">\n          <li>Go to <a href=\"https://www.spotify.com/en/account/privacy/\" target=\"_blank\" rel=\"noopener noreferrer\">Spotify privacy settings</a> and scroll down</li>\n          <li>Request a copy of your data</li>\n          <li>Wait a couple of days</li>\n          <li>Check your inbox and download the data</li>\n          <li>Unzip and add your <i>StreamingHistory#.json</i> files <Link to=\"/stats\">HERE</Link></li>\n        </ol>\n      </div>\n    );\n  }\n}\n","const Comparer = (x: number, y: number): number => {\n  return x < y ? -1 : x === y ? 0 : 1;\n}\n\nexport default Comparer;","import { Component, useCallback } from \"react\";\nimport { ListeningEntry } from \"../models/listeningEntry\";\nimport { from } from \"linq-to-typescript\";\nimport React from \"react\";\nimport { ButtonGroup, Button } from \"reactstrap\";\nimport { FixedSizeList } from 'react-window'\nimport { Scrollbars } from \"react-custom-scrollbars\";\nimport \"./Table.css\";\nimport Comparer from \"../models/Comparer\";\n\ninterface TabProps {\n  listeningHistory: ListeningEntry[];\n}\n\ninterface StatRow {\n  trackName: string;\n  artistName: string;\n  playedTimes: number;\n  totalListeningTime: number;\n  id: number;\n}\n\ninterface TabState {\n  tableFuncId: number;\n  searchPhrase: string;\n  orderByColumn: number;\n  descendingOrder: boolean;\n}\n\nexport class Table extends Component<TabProps, TabState> {\n  tableFuncs: ((x: ListeningEntry) => string)[] = [x => x.trackName + x.artistName, x => x.artistName]\n\n  constructor(props: Readonly<TabProps>) {\n    super(props);\n    this.state = { tableFuncId: 0, searchPhrase: \"\", orderByColumn: 0, descendingOrder: false };\n  }\n\n  tableData = (): StatRow[] => {\n    let result = from(this.props.listeningHistory)\n      .groupBy(this.tableFuncs[this.state.tableFuncId])\n      .select(x => ({ x, count: x.count(), sum: x.sum(t => t.msPlayed) }))\n      .orderByDescending(x => x.count, Comparer)\n      .thenByDescending(x => x.sum)\n      .select(({ x, count, sum }, i) => {\n        return {\n          id: i + 1,\n          trackName: x.first().trackName,\n          artistName: x.first().artistName,\n          playedTimes: count,\n          totalListeningTime: Math.round(sum / 60000)\n        }\n      })\n      .where(x => x.artistName.toLowerCase().indexOf(this.state.searchPhrase) > -1\n        || (this.state.tableFuncId === 0 && x.trackName.toLowerCase().indexOf(this.state.searchPhrase) > -1)\n      );\n\n    switch (this.state.orderByColumn) {\n      case 0: result = result.orderBy(x => x.id, Comparer); break;\n      case 1: result = result.orderBy(x => x.trackName); break;\n      case 2: result = result.orderBy(x => x.artistName); break;\n      case 3: result = result.orderBy(x => x.id, Comparer); break;\n      case 4: result = result.orderBy(x => x.totalListeningTime, Comparer); break;\n    }\n\n    if (this.state.descendingOrder)\n      result = result.reverse();\n\n    return result.toArray();\n  }\n\n  orderByChanged = (column: number) => {\n    if (this.state.orderByColumn === column)\n      this.setState({ ...this.state, descendingOrder: !this.state.descendingOrder });\n    else\n      this.setState({ ...this.state, descendingOrder: false, orderByColumn: column });\n  }\n\n  typeChanged = (type: number) => this.setState({ ...this.state, tableFuncId: type, orderByColumn: 0, descendingOrder: false });\n\n  render() {\n    const data = this.tableData();\n\n    const columns = [{\n      header: \"#\",\n      selector: (x: StatRow) => x.id,\n      style: { flex: 1 }\n    }, {\n      header: \"Track\",\n      selector: (x: StatRow) => x.trackName,\n      style: { flex: 10, display: this.state.tableFuncId === 0 ? \"table-cell \" : \"none\" },\n    }, {\n      header: \"Artist\",\n      selector: (x: StatRow) => x.artistName,\n      style: { flex: 10 }\n    }, {\n      header: \"Streams\",\n      selector: (x: StatRow) => x.playedTimes,\n      style: { flex: 2 }\n    }, {\n      header: \"Minutes\",\n      selector: (x: StatRow) => x.totalListeningTime,\n      style: { flex: 2 }\n    }];\n\n    const Row = ({ index, style }: any) => (\n      <div className=\"d-flex\" style={style}>\n        {columns.map((x) => (\n          <div key={x.header} style={x.style} className=\"data-cell\">{x.selector(data[index])}</div>\n        ))}\n      </div>\n    );\n\n    const CustomScrollbars = ({ onScroll, forwardedRef, style, children }: any) => {\n      const refSetter = useCallback(scrollbarsRef => {\n        if (scrollbarsRef) {\n          forwardedRef(scrollbarsRef.view);\n        } else {\n          forwardedRef(null);\n        }\n      }, []);\n\n      return (\n        <Scrollbars\n          ref={refSetter}\n          style={{ ...style, overflow: \"hidden\" }}\n          onScroll={onScroll}\n        >\n          {children}\n        </Scrollbars>\n      );\n    };\n\n    const CustomScrollbarsVirtualList = React.forwardRef((props, ref) => (\n      <CustomScrollbars {...props} forwardedRef={ref} />\n    ));\n\n    return (\n      <React.Fragment>\n        <div className=\"d-flex align-items-center mb-2\">\n          <div style={{flex: 1}}>\n            <span className=\"section-header\">Your favourites</span>\n          </div>\n          <div style={{flex: 1}}>\n            <input type=\"text\" className=\"form-control\" placeholder=\"Search\" style={{ borderRadius: 50 }}\n              onChange={e => this.setState({ ...this.state, searchPhrase: e.target.value.toLowerCase() })}\n            />\n            <span>Items in total: {data.length}</span>\n          </div>\n        </div>\n\n        <ButtonGroup className=\"d-flex mb-3\" size=\"lg\">\n          <Button active={this.state.tableFuncId === 0} color=\"primary\" onClick={() => this.typeChanged(0)}>Favourite tracks</Button>\n          <Button active={this.state.tableFuncId === 1} color=\"primary\" onClick={() => this.typeChanged(1)}>Favourite artists</Button>\n        </ButtonGroup>\n\n        <div className=\"data-header\">\n          {columns.map((x, i) => (\n            <div key={i} className={\"data-cell\" + (this.state.orderByColumn === i ? \" order-by\" : \"\")} style={x.style} onClick={() => this.orderByChanged(i)}>{x.header}</div>\n          ))}\n        </div>\n\n        <div className=\"data-items mb-2\">\n          <FixedSizeList\n            height={480}\n            itemCount={data.length}\n            itemSize={40}\n            width=\"100%\"\n            outerElementType={CustomScrollbarsVirtualList}\n          >\n            {Row}\n          </FixedSizeList>\n        </div>\n\n\n      </React.Fragment>\n    );\n  }\n}\n","import { Component } from \"react\";\nimport React from \"react\";\nimport { ButtonGroup, Button } from \"reactstrap\";\nimport { LineChart, CartesianGrid, XAxis, YAxis, Line, Tooltip, ResponsiveContainer } from \"recharts\";\nimport { ListeningEntry } from \"../models/listeningEntry\";\nimport { from } from \"linq-to-typescript\";\nimport Comparer from \"../models/Comparer\";\n\nexport interface ChartProps {\n  listeningHistory: ListeningEntry[];\n}\n\ninterface ChartState {\n  chartFuncId: number;\n}\n\nexport class Chart extends Component<ChartProps, ChartState> {\n  chartFuncs: ((x: Date) => number)[] = [\n    x => x.getHours(),\n    x => x.getDay() === 0 ? 7 : x.getDay(),\n    x => x.getFullYear() * 100 + x.getMonth() + 1\n  ];\n\n  daysOfWeek: string[] = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n  xAxisFuncs: ((x: { name: number }) => string)[] = [\n    x => x.name + \"\",\n    x => this.daysOfWeek[x.name],\n    x => x.name % 100 + \"-\" + Math.floor(x.name / 100)\n  ];\n\n  constructor(props: Readonly<ChartProps>) {\n    super(props);\n    this.state = { chartFuncId: 0 };\n  }\n\n\n  chartData = () => from(this.props.listeningHistory)\n    .groupBy(x => this.chartFuncs[this.state.chartFuncId](x.date))\n    .select(g => ({\n      name: g.key,\n      totalTime: Math.round(g.sum(x => x.msPlayed) / 60000),\n      totalPlaybacks: g.count(),\n      mostPlayedTrack: g.groupBy(x => x.trackName).orderByDescending(x => x.count(), Comparer).first().key,\n      mostPlayedArtist: g.groupBy(x => x.artistName).orderByDescending(x => x.count(), Comparer).first().key\n    }))\n    .toArray();\n\n  render() {\n    return (\n      <React.Fragment>\n        <span className=\"section-header mb-3\">Music over time</span>\n        \n        <ButtonGroup className=\"d-flex mb-3\" size=\"lg\">\n          <Button active={this.state.chartFuncId === 0} color=\"primary\" onClick={() => this.setState({ ...this.state, chartFuncId: 0 })}>Hours</Button>\n          <Button active={this.state.chartFuncId === 1} color=\"primary\" onClick={() => this.setState({ ...this.state, chartFuncId: 1 })}>Days of week</Button>\n          <Button active={this.state.chartFuncId === 2} color=\"primary\" onClick={() => this.setState({ ...this.state, chartFuncId: 2 })}>Months</Button>\n        </ButtonGroup>\n        <ResponsiveContainer width=\"100%\" height=\"60%\">\n          <LineChart\n            data={this.chartData()}\n          >\n            <CartesianGrid strokeDasharray=\"5 5\" />\n            <XAxis dataKey={this.xAxisFuncs[this.state.chartFuncId]} />\n            <YAxis />\n            <Tooltip content={CustomTooltip} />\n            <Line type=\"monotone\" dataKey=\"totalTime\" stroke=\"#00d76f\" strokeWidth={5} />\n          </LineChart>\n        </ResponsiveContainer>\n      </React.Fragment >);\n  }\n}\n\nconst CustomTooltip = ({ active, payload, label }: any) => {\n  if (active && payload) {\n    return (\n      <div className=\"custom-tooltip\">\n        <p className=\"label\">{`Total listening time: ${payload[0].payload.totalTime} minutes`}</p>\n        <p className=\"desc\">Total tracks played: {payload[0].payload.totalPlaybacks}<br />\n          Favourite track: {payload[0].payload.mostPlayedTrack}<br />\n          Favourite artist: {payload[0].payload.mostPlayedArtist}<br />\n        </p>\n      </div>\n    );\n  }\n\n  return null;\n};\n","import React from \"react\";\nimport { ListeningEntry } from \"../models/listeningEntry\";\nimport { from } from \"linq-to-typescript\";\nimport Comparer from \"../models/Comparer\";\n\nconst Summary: React.FC<{ listeningHistory: ListeningEntry[] }> = (props) => {\n  const data = from(props.listeningHistory);\n\n  const totalListeningTime = Math.round(data.sum(x => x.msPlayed) / 60000);\n  const totalPlayCount = data.count();\n\n  const differentTracks = data.select(x => x.artistName + x.trackName).distinct().count();\n  const differentArtists = data.select(x => x.artistName).distinct().count();\n\n  const top10TracksPlayCount = data.groupBy(x => x.trackName + x.artistName)\n    .select(x => x.count())\n    .orderByDescending(x => x, Comparer)\n    .take(Math.round(differentTracks / 10))\n    .sum();\n\n  const top10ArtistsPlayCount = data.groupBy(x => x.artistName)\n    .select(x => x.count())\n    .orderByDescending(x => x)\n    .take(Math.round(differentArtists / 10))\n    .sum();\n\n  const summary = {\n    totalListeningTimeMinutes: totalListeningTime,\n    totalListeningTimeSummary: `${Math.floor(totalListeningTime / 1440)} days, ${Math.floor(totalListeningTime / 60 % 24)} hours and ${Math.floor(totalListeningTime % 60)} minutes`,\n    totalPlayCount: totalPlayCount,\n    differentTracks: differentTracks,\n    differentArtists: differentArtists,\n    top10tracksShare: top10TracksPlayCount / totalPlayCount,\n    top10artistsShare: top10ArtistsPlayCount / totalPlayCount\n  };\n\n  return (\n    <React.Fragment>\n      <span className=\"section-header mb-3\">Summary</span>\n\n      <p className=\"text-center\" style={{fontSize: \"large\"}}>\n        In the last year you've listened to <br />\n        <span className=\"display-4\">{summary.totalPlayCount} tracks</span>  <br />\n        for a total of <br /><span className=\"display-4\">{summary.totalListeningTimeMinutes} minutes</span>  <br />\n        or <span className=\"display-4\"> {summary.totalListeningTimeSummary}</span>.\n      </p>\n    </React.Fragment >\n  );\n}\n\nexport default Summary;","import React from \"react\";\nimport { ListeningEntry } from \"../models/listeningEntry\";\nimport { from } from \"linq-to-typescript\";\n\nconst OtherUnits: React.FC<{ listeningHistory: ListeningEntry[] }> = (props) => {\n  const data = from(props.listeningHistory);\n\n  const totalListeningTime = data.sum(x => x.msPlayed) / 60000;\n\n  let round = (x: number, precision: number) => (Math.round(x * Math.pow(10, precision)) / Math.pow(10, precision)).toLocaleString();\n\n  return (\n    <div style={{fontSize: \"x-large\", fontWeight: 300}}>\n      <span className=\"section-header mb-4\">In other words...</span>\n      <p>{round(totalListeningTime, 0)} minutes is a lot. In this time</p>\n      <ul>\n        <li>you can listen {round(totalListeningTime / 47, 1)} times to The Beatles's <i>Abbey Road</i> album</li>\n        <li>you can watch <i>The Lord of the Rings</i> trilogy {round(totalListeningTime / 725, 1)} times</li>\n        <li>light travels {round(totalListeningTime * 17987547.48, 0)} kilometers</li>\n        <li>on average {round(totalListeningTime * 250, 0)} babies are born</li>\n      </ul>\n      <p>If you have a healthy 8 hours of sleep a day you've spent {round(totalListeningTime / 3504, 2)}% of last year's awake time listening to music.</p>\n    </div>\n  );\n}\n\nexport default OtherUnits;","import React from \"react\";\nimport { ListeningEntry } from \"../models/listeningEntry\";\nimport { from } from \"linq-to-typescript\";\nimport { ResponsiveContainer, LineChart, CartesianGrid, XAxis, YAxis, Line, Tooltip } from \"recharts\";\nimport Comparer from \"../models/Comparer\";\n\nconst Attachment: React.FC<{ listeningHistory: ListeningEntry[] }> = (props) => {\n  const data = from(props.listeningHistory);\n\n  const totalPlayCount = data.count();\n\n  const differentTracks = data.select(x => x.artistName + x.trackName).distinct().count();\n  const differentArtists = data.select(x => x.artistName).distinct().count();\n\n  const topTracksPlayCount = data.groupBy(x => x.trackName + x.artistName)\n    .select(x => x.count())\n    .orderByDescending(x => x, Comparer)\n    .aggregate({ result: Array.from([0]), i: 0 }, (x, y) => {\n      if (x.i * 100 >= x.result.length * differentTracks)\n        x.result.push(y + x.result[x.result.length - 1]);\n      else\n        x.result[x.result.length - 1] += y;\n      x.i++;\n      return x;\n    }).result;\n\n  let topArtistsPlayCount = data.groupBy(x => x.artistName)\n    .select(x => x.count())\n    .orderByDescending(x => x, Comparer)\n    .aggregate({ result: Array.from([0]), i: 0 }, (x, y) => {\n      if (x.i * 100 >= x.result.length * differentArtists)\n        x.result.push(y + x.result[x.result.length - 1]);\n      else\n        x.result[x.result.length - 1] += y;\n      x.i++;\n      return x;\n    }).result;\n    topArtistsPlayCount = [0, ...topArtistsPlayCount];\n  const chartData = [0, ...topTracksPlayCount].map((x, i) => ({ top: i, Tracks: Math.round(x / totalPlayCount * 10000) / 100, Artists: Math.round(topArtistsPlayCount[i] / totalPlayCount * 10000) / 100}));\n\n\n\n  return (\n    <React.Fragment>\n      <span className=\"section-header mb-4\">Attachment</span>\n\n      <p className=\"text-center\" style={{ fontSize: \"large\" }}>\n        There are <span className=\"display-4\">{differentArtists}</span> different artists\n        and <span className=\"display-4\">{differentTracks}</span> different tracks in your streaming history.\n        How many percents of all streams are your favourites responsible for?\n      </p>\n      <ResponsiveContainer width=\"100%\" height=\"50%\">\n        <LineChart\n          data={chartData}\n        >\n          <CartesianGrid strokeDasharray=\"5 5\" />\n          <XAxis dataKey=\"top\" />\n          <YAxis />\n          <Tooltip />\n          <Line type=\"monotone\" dataKey=\"Tracks\" stroke=\"#00d76f\" strokeWidth={5}  dot={false} />\n          <Line type=\"monotone\" dataKey=\"Artists\" stroke=\"#666666\" strokeWidth={5}  dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </React.Fragment >\n  );\n}\n\nexport default Attachment;","import React, { Component } from 'react';\nimport Dropzone from 'react-dropzone';\nimport { ListeningEntry } from '../models/listeningEntry';\nimport { Table } from './Table';\nimport { Chart } from './Chart';\nimport Summary from './Summary';\nimport \"./Stats.css\";\nimport OtherUnits from './OtherUnits';\nimport Attachment from './Attachment';\n\nexport interface StatsProps {\n}\n\nexport interface StatsState {\n  listeningHistory: ListeningEntry[];\n  progress: number;\n}\n\nexport class Stats extends Component<StatsProps, StatsState> {\n  static displayName = Stats.name;\n\n  constructor(props: Readonly<StatsProps>) {\n    super(props);\n    this.state = { listeningHistory: [], progress: 0 };\n  }\n\n  loadFiles = (files: File[]) => {\n    let result: ListeningEntry[] = [];\n    let loadedFiles = 0;\n    const filesToLoad = files.filter(x => x.name.startsWith(\"StreamingHistory\"));\n    this.setState({ ...this.state, progress: 1 }, () =>\n      filesToLoad.forEach(f => {\n        let fileReader = new FileReader();\n        fileReader.onloadend = (e) => {\n          let ls: ListeningEntry[] = JSON.parse(fileReader.result as string);\n          //ls = ls.filter((x: ListeningEntry) => x.msPlayed > 60000 && x.msPlayed < 600000);\n          ls.forEach(x => x.date = new Date(x.endTime.replace(\" \", \"T\") + \":00.000Z\"));\n          result = [...result, ...ls];\n          loadedFiles = loadedFiles + 1;\n          if (loadedFiles === filesToLoad.length)\n            this.setState({ ...this.state, listeningHistory: result, progress: 2 });\n            let summary = document.getElementById('summary');\n            if (summary)\n              summary!.scrollIntoView()\n        }\n\n        fileReader.readAsText(f);\n      })\n    );\n  }\n\n  render() {\n    return this.state.progress === 0\n      ? (\n        <Dropzone onDrop={this.loadFiles}>\n          {({ getRootProps, getInputProps }) => (\n            <div {...getRootProps({ className: 'dropzone' })}>\n              <input {...getInputProps()} />\n              <p>Drag and drop your StreamingHistory#.json files here, or click to select files</p>\n            </div>\n          )}\n        </Dropzone>\n      ) : this.state.progress === 1 ? (\n        <h2 className=\"text-center display-4\">Loading...</h2>\n      ) :\n        (\n          <React.Fragment>\n            <section id=\"summary\">\n              <Summary listeningHistory={this.state.listeningHistory} />\n            </section>\n            <section id=\"otherUnits\">\n              <OtherUnits listeningHistory={this.state.listeningHistory} />\n            </section>\n            <section id=\"chart\">\n              <Chart listeningHistory={this.state.listeningHistory} />\n            </section>\n            <section id=\"table\">\n              <Table listeningHistory={this.state.listeningHistory} />\n            </section>\n            <section id=\"attachment\">\n              <Attachment listeningHistory={this.state.listeningHistory} />\n            </section>\n          </React.Fragment>\n        );\n  }\n}\n","import React from 'react';\n\nconst About: React.FC = () => {\n    return (\n        <div>\n            <h1>About</h1>\n            <p>This app is made for fun and as a training. None of your data is stored, everything is processed locally. It is not related to Spotify AB or any of it´s partners in any way.</p>\n            <div>Icons made by <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\n        </div>\n    );\n\n}\n\nexport default About;","import React from 'react';\nimport './App.css';\nimport { Layout } from './components/Layout';\nimport { Route } from 'react-router';\nimport { Home } from './components/Home';\nimport { Stats } from './components/Stats';\nimport { HashRouter } from 'react-router-dom';\nimport About from './components/About';\n\nconst App: React.FC = () => {\n  const baseUrl = document.getElementsByTagName('base')[0].getAttribute('href') as string;\n\n  return (\n    <HashRouter basename={baseUrl}>\n      <Layout>\n        <Route exact path='/' component={Home} />\n        <Route path='/stats' component={Stats} />\n        <Route path='/about' component={About} />\n      </Layout>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './custom.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}