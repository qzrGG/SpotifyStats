{"version":3,"sources":["components/NavMenu.tsx","components/Layout.tsx","components/Home.tsx","models/Comparer.ts","common/math.helper.ts","components/Table.tsx","components/Ranking.tsx","components/StatsContext.ts","components/Chart.tsx","components/Summary.tsx","components/OtherUnits.tsx","components/Attachment.tsx","components/Stats.tsx","components/About.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NavMenu","props","toggleNavbar","setState","collapsed","state","toggleDarkMode","checked","isDarkModeEnabled","element","document","body","classList","add","remove","window","matchMedia","matches","this","Navbar","className","light","Container","NavbarBrand","tag","Link","to","src","height","alt","NavbarToggler","onClick","Collapse","isOpen","navbar","NavItem","style","marginTop","onChange","checkedIcon","icon","faMoon","marginLeft","onColor","uncheckedIcon","faSun","NavLink","Component","displayName","name","Layout","children","Home","href","target","rel","Comparer","x","y","round","precision","Math","pow","minutes","timeInMinutes","hours","floor","seconds","toString","padStart","TableType","Ranking","listRef","React","createRef","useEffect","current","scrollTo","data","CustomScrollbars","onScroll","forwardedRef","refSetter","useCallback","scrollbarsRef","view","ref","overflow","CustomScrollbarsVirtualList","forwardRef","itemCount","length","itemSize","width","outerElementType","index","_","row","onSubsetChanged","columns","map","selector","header","areEqual","prevProps","nextProps","memo","StatsContext","createContext","listeningHistory","since","Date","StatsProvider","Provider","CustomTooltip","active","payload","label","totalTime","totalPlaybacks","mostPlayedTrack","mostPlayedArtist","Chart","useState","chartFuncId","context","useContext","chartFuncs","getHours","getDay","monthValue","daysOfWeek","xAxisFuncs","date","getFullYear","getMonth","nthMonth","n","firstDate","nthDate","setMonth","emptyData","range","select","toArray","d1","d2","months","monthDiff","chartData","from","undefined","subset","groupBy","g","key","sum","msPlayed","count","trackName","orderByDescending","first","take","artistName","union","Fragment","description","ButtonGroup","size","Button","color","ResponsiveContainer","LineChart","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","content","Line","type","stroke","strokeWidth","Table","tableType","trackAndArtist","searchPhrase","orderByColumn","descendingOrder","scrollPosition","listeningHistorySubset","subsetDescription","result","artistOnly","groupByProperty","t","thenByDescending","i","id","playedTimes","totalListeningTime","entries","where","toLowerCase","indexOf","orderBy","reverse","s","typeChanged","flex","display","placeholder","borderRadius","e","value","column","Summary","totalPlayCount","differentTracks","distinct","differentArtists","top10TracksPlayCount","top10ArtistsPlayCount","summary","totalListeningTimeMinutes","totalListeningTimeSummary","top10tracksShare","top10artistsShare","fontSize","toLocaleDateString","OtherUnits","fontWeight","top","Artists","Tracks","Attachment","topTracksPlayCount","aggregate","Array","push","topArtistsPlayCount","varietyArtists","datapoint","varietyTracks","dot","Stats","progress","files","Promise","all","loadFile","then","results","r","JSON","parse","flat","forEach","endTime","replace","ordered","getTime","last","getElementById","scrollIntoView","file","resolve","reject","fileReader","FileReader","onload","onerror","onabort","readAsText","onDrop","filesToLoad","filter","startsWith","getRootProps","getInputProps","About","title","App","baseUrl","getElementsByTagName","getAttribute","basename","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5e68f395.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport Switch from \"react-switch\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSun, faMoon } from '@fortawesome/free-solid-svg-icons'\nimport './NavMenu.css';\n\nexport interface NavMenuProps {\n\n}\n\nexport interface NavMenuState {\n  collapsed: boolean;\n  isDarkModeEnabled: boolean;\n}\n\nexport class NavMenu extends Component<NavMenuProps, NavMenuState> {\n  static displayName = NavMenu.name;\n\n  constructor (props: Readonly<NavMenuProps>) {\n    super(props);\n\n    this.state = {\n      collapsed: true,\n      isDarkModeEnabled: false\n    };\n  }\n\n  componentDidMount() {\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      this.toggleDarkMode(true);\n    }\n  }\n\n  toggleNavbar = () => {\n    this.setState({\n      collapsed: !this.state.collapsed\n    });\n  }\n\n  toggleDarkMode = (checked: boolean) => {\n    this.setState({ isDarkModeEnabled: checked}, () => {\n      const element = document.body;\n      if (checked) {\n        element.classList.add(\"dark-mode\");\n      }\n      else {\n        element.classList.remove(\"dark-mode\");\n      }\n    });\n  }\n\n  render () {\n    return (\n      <header>\n        <Navbar className=\"navbar-expand-sm navbar-toggleable-sm ng-white border-bottom box-shadow mb-3\" light>\n          <Container>\n            <NavbarBrand tag={Link} to=\"/\"><img src='./logo192.png' height=\"40px\" alt=\"Logo\" /> Your Spotify Stats</NavbarBrand>\n            <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\n            <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={!this.state.collapsed} navbar>\n              <ul className=\"navbar-nav flex-grow\">\n                <NavItem style={{marginTop: 8}}>\n                  <Switch checked={this.state.isDarkModeEnabled} onChange={this.toggleDarkMode} height={26} \n                  checkedIcon={<FontAwesomeIcon icon={faMoon} style={{marginLeft: 5}}/>} onColor=\"#33c17d\" uncheckedIcon={<FontAwesomeIcon icon={faSun} style={{marginLeft: 10}}/>}/>\n                </NavItem>\n                <NavItem>\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/\">Instructions</NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/stats\">Stats</NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/about\">About</NavLink>\n                </NavItem>\n              </ul>\n            </Collapse>\n          </Container>\n        </Navbar>\n      </header>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Container } from 'reactstrap';\nimport { NavMenu } from './NavMenu';\n\nexport class Layout extends Component {\n  static displayName = Layout.name;\n\n  render () {\n    return (\n      <div>\n        <NavMenu />\n        <Container>\n          {this.props.children}\n        </Container>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nexport class Home extends Component {\n  static displayName = Home.name;\n\n  render () {\n    return (\n      <div>\n        <h1>How to use it</h1>\n        <ol className=\"instructions\">\n          <li>Go to <a href=\"https://www.spotify.com/account/privacy/\" target=\"_blank\" rel=\"noopener noreferrer\">Spotify privacy settings</a> and scroll down</li>\n          <li>Request a copy of your data</li>\n          <li>Wait a couple of days</li>\n          <li>Check your inbox and download the data</li>\n          <li>Unzip and add your <i>StreamingHistory#.json</i> files <Link to=\"/stats\">HERE</Link></li>\n        </ol>\n      </div>\n    );\n  }\n}\n","const Comparer = (x: number, y: number): number => {\n  return x < y ? -1 : x === y ? 0 : 1;\n}\n\nexport default Comparer;","export function round(x: number, precision: number): number {\n    return (Math.round(x * Math.pow(10, precision)) / Math.pow(10, precision));\n}\n\nexport function minutes(timeInMinutes: number): string {\n    const hours = Math.floor(timeInMinutes / 60);\n    const minutes = Math.floor(timeInMinutes) - hours * 60;\n    const seconds = Math.round((timeInMinutes - hours * 60 - minutes) * 60);\n    if (hours > 0)\n        return `${hours}:${minutes.toString().padStart(2, \"0\")}:${seconds.toString().padStart(2, \"0\")}`;\n    else\n        return `${minutes}:${seconds.toString().padStart(2, \"0\")}`;\n    \n}","import { from } from \"linq-to-typescript\";\nimport React, { useState, useEffect, useContext } from \"react\";\nimport { ButtonGroup, Button } from \"reactstrap\";\nimport \"./Table.css\";\nimport Comparer from \"../models/Comparer\";\nimport { minutes, round } from \"../common/math.helper\";\nimport { StatRow } from \"../models/StatRow\";\nimport Ranking from \"./Ranking\";\nimport { ListeningEntry } from \"../models/listeningEntry\";\nimport Chart from \"./Chart\";\nimport StatsContext from \"./StatsContext\";\n\ninterface TabProps {\n}\n\ninterface TabState {\n  tableType: TableType;\n  searchPhrase: string;\n  orderByColumn: number;\n  descendingOrder: boolean;\n  scrollPosition: number;\n  data: StatRow[];\n  listeningHistorySubset: ListeningEntry[];\n  subsetDescription: string;\n}\n\nenum TableType {\n  trackAndArtist = 0,\n  artistOnly = 1\n}\n\nconst Table: React.FC<TabProps> = (props) => {\n  const [state, setState] = useState<TabState>({\n    tableType: TableType.trackAndArtist,\n    searchPhrase: \"\",\n    orderByColumn: 0,\n    descendingOrder: false,\n    scrollPosition: 0,\n    data: [],\n    listeningHistorySubset: [],\n    subsetDescription: \"\"\n  });\n\n  const groupByProperty = (type: TableType): ((x: ListeningEntry) => string) => {\n    switch (type) {\n      case TableType.trackAndArtist:\n        return x => `${x.trackName}|${x.artistName}`;\n      case TableType.artistOnly:\n        return x => x.artistName;\n    }\n  }\n\n  const context = useContext(StatsContext);\n\n  useEffect(() => {\n    let result = from(context.listeningHistory)\n      .groupBy(groupByProperty(state.tableType))\n      .select(x => ({ x, count: x.count(), sum: x.sum(t => t.msPlayed) }))\n      .orderByDescending(x => x.count, Comparer)\n      .thenByDescending(x => x.sum)\n      .select(({ x, count, sum }, i) => {\n        return {\n          id: i + 1,\n          trackName: x.first().trackName,\n          artistName: x.first().artistName,\n          playedTimes: count,\n          totalListeningTime: round(sum / 60000, 2),\n          entries: x.toArray()\n        }\n      })\n      .where(x => x.artistName.toLowerCase().indexOf(state.searchPhrase) > -1\n        || (state.tableType === TableType.trackAndArtist && x.trackName.toLowerCase().indexOf(state.searchPhrase) > -1)\n      );\n\n    switch (state.orderByColumn) {\n      case 0: result = result.orderBy(x => x.id, Comparer); break;\n      case 1: result = result.orderBy(x => x.trackName); break;\n      case 2: result = result.orderBy(x => x.artistName); break;\n      case 3: result = result.orderBy(x => x.id, Comparer); break;\n      case 4: result = result.orderBy(x => x.totalListeningTime, Comparer); break;\n    }\n\n    if (state.descendingOrder)\n      result = result.reverse();\n\n    setState(s => ({ ...s, data: result.toArray() }));\n  }, [context.listeningHistory, state.descendingOrder, state.orderByColumn, state.searchPhrase, state.tableType]);\n\n  const orderByChanged = (column: number) => {\n    if (state.orderByColumn === column)\n      setState({ ...state, descendingOrder: !state.descendingOrder });\n    else\n      setState({ ...state, descendingOrder: false, orderByColumn: column });\n  }\n\n  const typeChanged = (type: TableType) => setState({ ...state, tableType: type, orderByColumn: 0, descendingOrder: false });\n\n  const onRowSelected = (row: StatRow) => {\n    const description = state.tableType === TableType.artistOnly ? row.artistName : `${row.trackName} by ${row.artistName}`;\n    setState({ ...state, listeningHistorySubset: row.entries, subsetDescription: description });\n  }\n\n  const onSearchedTextChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setState({ ...state, searchPhrase: e.target.value.toLowerCase() });\n  }\n\n  const columns = [{\n    header: \"#\",\n    selector: (x: StatRow) => x.id,\n    style: { flex: 1 }\n  }, {\n    header: \"Track\",\n    selector: (x: StatRow) => x.trackName,\n    style: { flex: 10, display: state.tableType === TableType.trackAndArtist ? \"table-cell \" : \"none\" },\n  }, {\n    header: \"Artist\",\n    selector: (x: StatRow) => x.artistName,\n    style: { flex: 10 }\n  }, {\n    header: \"Streams\",\n    selector: (x: StatRow) => x.playedTimes,\n    style: { flex: 2 }\n  }, {\n    header: \"Time\",\n    selector: (x: StatRow) => minutes(x.totalListeningTime),\n    style: { flex: 3 }\n  }, {\n    header: \"Earnings ($)\",\n    selector: (x: StatRow) => round(x.playedTimes * 0.004, 2),\n    style: { flex: 2, display: state.tableType === TableType.artistOnly ? \"table-cell \" : \"none\" }\n  }];\n\n  return (\n    <React.Fragment>\n      <div className=\"d-flex align-items-center mb-2\">\n        <div style={{ flex: 1 }}>\n          <span className=\"section-header\">Your favourites</span>\n        </div>\n        <div style={{ flex: 1 }}>\n          <input type=\"text\" className=\"form-control\" placeholder=\"Search\" style={{ borderRadius: 50 }}\n            onChange={onSearchedTextChanged}\n          />\n          <span>Items in total: {state.data.length}</span>\n        </div>\n      </div>\n\n      <ButtonGroup className=\"d-flex mb-3\" size=\"md\">\n        <Button active={state.tableType === TableType.trackAndArtist} color=\"primary\" onClick={() => typeChanged(TableType.trackAndArtist)}>Favourite tracks</Button>\n        <Button active={state.tableType === TableType.artistOnly} color=\"primary\" onClick={() => typeChanged(TableType.artistOnly)}>Favourite artists</Button>\n      </ButtonGroup>\n\n      <div className=\"data-header\">\n        {columns.map((x, i) => (\n          <div key={i} className={\"data-cell\" + (state.orderByColumn === i ? \" order-by\" : \"\")} style={x.style} onClick={() => orderByChanged(i)}>{x.header}</div>\n        ))}\n      </div>\n\n      <Ranking data={state.data} columns={columns} onSubsetChanged={onRowSelected} />\n      <Chart description={`Details for ${state.subsetDescription}`} subset={state.listeningHistorySubset} />\n\n    </React.Fragment>\n  );\n}\n\nexport default Table;","import { useCallback, useEffect } from \"react\";\nimport React from \"react\";\nimport { FixedSizeList } from \"react-window\";\nimport \"./Table.css\";\nimport { StatColumn, StatRow } from \"../models/StatRow\";\nimport Scrollbars from \"react-custom-scrollbars-2\";\n\ninterface RankingProps {\n  onSubsetChanged: (subset: StatRow) => void;\n  data: StatRow[];\n  columns: StatColumn[];\n}\n\nconst Ranking: React.FC<RankingProps> = (props) => {\n  const listRef = React.createRef<FixedSizeList>();\n\n  useEffect(() => {\n    listRef.current?.scrollTo(0);\n  }, [props.data, listRef]);\n\n  const onRowSelected = (row: StatRow) => {\n    props.onSubsetChanged(row);\n  }\n\n  const Row = ({ index, style }: any) => (\n    <div className=\"d-flex stats-row\" style={style} onClick={_ => onRowSelected(props.data[index])}>\n      {props.columns.map((x) => (\n        <div key={x.header} style={x.style} className=\"data-cell\">{x.selector(props.data[index])}</div>\n      ))}\n    </div>\n  );\n\n  const CustomScrollbars = ({ onScroll, forwardedRef, style, children }: any) => {\n    const refSetter = useCallback(scrollbarsRef => {\n      if (scrollbarsRef) {\n        forwardedRef(scrollbarsRef.view);\n      } else {\n        forwardedRef(null);\n      }\n    }, [forwardedRef]);\n\n    return (\n      <Scrollbars\n        ref={refSetter}\n        style={{ ...style, overflow: \"hidden\" }}\n        onScroll={onScroll}\n      >\n        {children}\n      </Scrollbars>\n    );\n  };\n\n  const CustomScrollbarsVirtualList = React.forwardRef((props, ref) => (\n    <CustomScrollbars {...props} forwardedRef={ref} />\n  ));\n\n  return (\n    <div className=\"data-items mb-2\">\n      <FixedSizeList\n        height={400}\n        itemCount={props.data.length}\n        itemSize={40}\n        width=\"100%\"\n        outerElementType={CustomScrollbarsVirtualList}\n        ref={listRef}\n      >\n        {Row}\n      </FixedSizeList>\n    </div>\n  );\n}\n\nconst areEqual = (prevProps: RankingProps, nextProps: RankingProps): boolean => {\n  return prevProps.data === nextProps.data;\n }\n\nexport default React.memo(Ranking, areEqual);","import React from 'react';\nimport { ListeningEntry } from '../models/listeningEntry';\n\nexport interface StatsData {\n    listeningHistory: ListeningEntry[];\n    since: Date;\n    to: Date;\n}\nconst StatsContext = React.createContext<StatsData>({listeningHistory: [], since: new Date(), to: new Date()});\n\nexport const StatsProvider = StatsContext.Provider\nexport default StatsContext","import { useContext, useState } from \"react\";\nimport React from \"react\";\nimport { ButtonGroup, Button } from \"reactstrap\";\nimport { LineChart, CartesianGrid, XAxis, YAxis, Line, Tooltip, ResponsiveContainer } from \"recharts\";\nimport { from, range } from \"linq-to-typescript\";\nimport Comparer from \"../models/Comparer\";\nimport { minutes, round } from \"../common/math.helper\";\nimport StatsContext from \"./StatsContext\";\nimport { ListeningEntry } from \"../models/listeningEntry\";\n\nexport interface ChartProps {\n  description: string;\n  subset?: ListeningEntry[];\n}\n\ninterface ChartState {\n  chartFuncId: number;\n}\n\nconst Chart: React.FC<ChartProps> = (props) => {\n  const [state, setState] = useState<ChartState>({ chartFuncId: 0 });\n  const context = useContext(StatsContext);\n\n  const chartFuncs: ((x: Date) => number)[] = [\n    x => x.getHours(),\n    x => x.getDay() === 0 ? 7 : x.getDay(),\n    x => monthValue(x)\n  ];\n\n  const daysOfWeek: string[] = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n  const xAxisFuncs: ((x: { name: number }) => string)[] = [\n    x => x.name.toString().padStart(2, '0'),\n    x => daysOfWeek[x.name],\n    x => `${(x.name % 100).toString().padStart(2, '0')}.${Math.floor(x.name / 100) - 2000}`\n  ];\n\n  const monthValue = (date: Date): number => date.getFullYear() * 100 + date.getMonth() + 1;\n\n  const monthDiff = (d1: Date, d2: Date) => {\n    let months = 0;\n    months = (d2.getFullYear() - d1.getFullYear()) * 12;\n    months -= d1.getMonth();\n    months += d2.getMonth();\n    return months <= 0 ? 0 : months;\n  }\n\n  const nthMonth = (n: number): number => {\n    const firstDate = new Date(context.since);\n    const nthDate = new Date(firstDate.setMonth(firstDate.getMonth() + n));\n    return monthValue(nthDate);\n  }\n\n  const emptyData: { name: number, totalTime: number, totalPlaybacks: number, mostPlayedTrack: string, mostPlayedArtist: string }[][] = [\n    range(0, 24).select(x => ({ name: x, totalTime: 0, totalPlaybacks: 0, mostPlayedTrack: \"\", mostPlayedArtist: \"\" })).toArray(),\n    range(1, 7).select(x => ({ name: x, totalTime: 0, totalPlaybacks: 0, mostPlayedTrack: \"\", mostPlayedArtist: \"\" })).toArray(),\n    range(0, monthDiff(context.since, context.to)).select(x => ({ name: nthMonth(x), totalTime: 0, totalPlaybacks: 0, mostPlayedTrack: \"\", mostPlayedArtist: \"\" })).toArray()\n  ];\n\n\n  const chartData = from(props.subset !== undefined ? props.subset : context.listeningHistory)\n    .groupBy(x => chartFuncs[state.chartFuncId](x.date))\n    .select(g => ({\n      name: g.key,\n      totalTime: round(g.sum(x => x.msPlayed) / 60000, 2),\n      totalPlaybacks: g.count(),\n      mostPlayedTrack: g.groupBy(x => x.trackName).orderByDescending(x => x.count(), Comparer).first().take(1).select(x => `${x.trackName} by ${x.artistName}`).first(),\n      mostPlayedArtist: g.groupBy(x => x.artistName).orderByDescending(x => x.count(), Comparer).first().key\n    }))\n    .union(emptyData[state.chartFuncId])\n    .groupBy(x => x.name)\n    .select(x => x.first())\n    .toArray();\n\n  if (props.subset !== undefined && props.subset.length === 0) {\n    return (<p>Select a track or an artist in the table to see it's details</p>);\n  }\n\n  return (\n    <React.Fragment>\n      <span className=\"section-header mb-3\">{props.description}</span>\n\n      <ButtonGroup className=\"d-flex mb-3\" size=\"md\">\n        <Button active={state.chartFuncId === 0} color=\"primary\" onClick={() => setState({ chartFuncId: 0 })}>Hours</Button>\n        <Button active={state.chartFuncId === 1} color=\"primary\" onClick={() => setState({ chartFuncId: 1 })}>Days of week</Button>\n        <Button active={state.chartFuncId === 2} color=\"primary\" onClick={() => setState({ chartFuncId: 2 })}>Months</Button>\n      </ButtonGroup>\n      <ResponsiveContainer width=\"100%\" height=\"70%\">\n        <LineChart\n          data={chartData}\n        >\n          <CartesianGrid strokeDasharray=\"5 5\" />\n          <XAxis dataKey={xAxisFuncs[state.chartFuncId]} />\n          <YAxis />\n          <Tooltip content={CustomTooltip} />\n          <Line type=\"monotone\" dataKey=\"totalTime\" stroke=\"#00d76f\" strokeWidth={5} />\n        </LineChart>\n      </ResponsiveContainer>\n    </React.Fragment >);\n}\n\nconst CustomTooltip = ({ active, payload, label }: any) => {\n  if (active && payload && payload[0].payload.totalTime > 0) {\n    return (\n      <div className=\"custom-tooltip\">\n        <p className=\"label\">{`Total listening time: ${minutes(payload[0].payload.totalTime)}`}</p>\n        <p className=\"desc\">Total tracks played: {payload[0].payload.totalPlaybacks}<br />\n          Favourite track: {payload[0].payload.mostPlayedTrack}<br />\n          Favourite artist: {payload[0].payload.mostPlayedArtist}<br />\n        </p>\n      </div>\n    );\n  }\n\n  return null;\n};\n\nexport default Chart;","import React, { useContext } from \"react\";\nimport { from } from \"linq-to-typescript\";\nimport Comparer from \"../models/Comparer\";\nimport StatsContext from \"./StatsContext\";\n\nconst Summary: React.FC = () => {\n  const context = useContext(StatsContext);\n\n  const data = from(context.listeningHistory);\n\n  const totalListeningTime = Math.round(data.sum(x => x.msPlayed) / 60000);\n  const totalPlayCount = data.count();\n\n  const differentTracks = data.select(x => x.artistName + x.trackName).distinct().count();\n  const differentArtists = data.select(x => x.artistName).distinct().count();\n\n  const top10TracksPlayCount = data.groupBy(x => x.trackName + x.artistName)\n    .select(x => x.count())\n    .orderByDescending(x => x, Comparer)\n    .take(Math.round(differentTracks / 10))\n    .sum();\n\n  const top10ArtistsPlayCount = data.groupBy(x => x.artistName)\n    .select(x => x.count())\n    .orderByDescending(x => x)\n    .take(Math.round(differentArtists / 10))\n    .sum();\n\n  const summary = {\n    totalListeningTimeMinutes: totalListeningTime,\n    totalListeningTimeSummary: `${Math.floor(totalListeningTime / 1440)} days, ${Math.floor(totalListeningTime / 60 % 24)} hours and ${Math.floor(totalListeningTime % 60)} minutes`,\n    totalPlayCount: totalPlayCount,\n    differentTracks: differentTracks,\n    differentArtists: differentArtists,\n    top10tracksShare: top10TracksPlayCount / totalPlayCount,\n    top10artistsShare: top10ArtistsPlayCount / totalPlayCount,\n  };\n\n  return (\n    <React.Fragment>\n      <span className=\"section-header mb-3\">Summary</span>\n\n      <p className=\"text-center\" style={{fontSize: \"large\"}}>\n        Since {context.since.toLocaleDateString()} to {context.to.toLocaleDateString()} you've listened to <br />\n        <span className=\"display-4\">{summary.totalPlayCount} tracks</span>  <br />\n        for a total of <br /><span className=\"display-4\">{summary.totalListeningTimeMinutes} minutes</span>  <br />\n        or <span className=\"display-4\"> {summary.totalListeningTimeSummary}</span>.\n      </p>\n    </React.Fragment >\n  );\n}\n\nexport default Summary;","import React, { useContext } from \"react\";\nimport { from } from \"linq-to-typescript\";\nimport { round } from \"../common/math.helper\";\nimport StatsContext from \"./StatsContext\";\n\nconst OtherUnits: React.FC = () => {\n  const context = useContext(StatsContext);\n  const data = from(context.listeningHistory);\n\n  const totalListeningTime = data.sum(x => x.msPlayed) / 60000;\n\n  return (\n    <div style={{fontSize: \"x-large\", fontWeight: 300}}>\n      <span className=\"section-header mb-4\">In other words...</span>\n      <p>{round(totalListeningTime, 0)} minutes is a lot. In this time</p>\n      <ul>\n        <li>you can listen {round(totalListeningTime / 47, 1)} times to The Beatles's <i>Abbey Road</i> album</li>\n        <li>you can watch <i>The Lord of the Rings</i> trilogy {round(totalListeningTime / 725, 1)} times</li>\n        <li>light travels {round(totalListeningTime * 17987547.48, 0)} kilometers</li>\n        <li>on average {round(totalListeningTime * 250, 0)} babies are born</li>\n      </ul>\n      <p>If you have a healthy 8 hours of sleep a day you've spent {round(totalListeningTime / 3504, 2)}% of last year's awake time listening to music.</p>\n    </div>\n  );\n}\n\nexport default OtherUnits;","import React, { useContext } from \"react\";\nimport { from } from \"linq-to-typescript\";\nimport { ResponsiveContainer, LineChart, CartesianGrid, XAxis, YAxis, Line, Tooltip } from \"recharts\";\nimport Comparer from \"../models/Comparer\";\nimport { round } from \"../common/math.helper\";\nimport StatsContext from \"./StatsContext\";\n\nconst Attachment: React.FC = () => {\n  const context = useContext(StatsContext);\n\n  const data = from(context.listeningHistory);\n\n  const totalPlayCount = data.count();\n\n  const differentTracks = data.select(x => x.artistName + x.trackName).distinct().count();\n  const differentArtists = data.select(x => x.artistName).distinct().count();\n\n  const topTracksPlayCount = data.groupBy(x => x.trackName + x.artistName)\n    .select(x => x.count())\n    .orderByDescending(x => x, Comparer)\n    .aggregate({ result: Array.from([0]), i: 0 }, (x, y) => {\n      if (x.i * 100 >= x.result.length * differentTracks)\n        x.result.push(y + x.result[x.result.length - 1]);\n      else\n        x.result[x.result.length - 1] += y;\n      x.i++;\n      return x;\n    }).result;\n\n  let topArtistsPlayCount = data.groupBy(x => x.artistName)\n    .select(x => x.count())\n    .orderByDescending(x => x, Comparer)\n    .aggregate({ result: Array.from([0]), i: 0 }, (x, y) => {\n      if (x.i * 100 >= x.result.length * differentArtists)\n        x.result.push(y + x.result[x.result.length - 1]);\n      else\n        x.result[x.result.length - 1] += y;\n      x.i++;\n      return x;\n    }).result;\n    topArtistsPlayCount = [0, ...topArtistsPlayCount];\n  const chartData = [0, ...topTracksPlayCount].map((x, i) => ({ top: i, Tracks: Math.round(x / totalPlayCount * 10000) / 100, Artists: Math.round(topArtistsPlayCount[i] / totalPlayCount * 10000) / 100}));\n  const varietyArtists = round(from(chartData).aggregate(5000, (sum, datapoint) => sum -= (datapoint.Artists - datapoint.top))/50, 2);\n  const varietyTracks = round(from(chartData).aggregate(5000, (sum, datapoint) => sum -= (datapoint.Tracks - datapoint.top))/50, 2);\n\n  return (\n    <React.Fragment>\n      <span className=\"section-header mb-4\">Music variety</span>\n\n      <p className=\"text-center\" style={{ fontSize: \"large\" }}>\n        There are <span className=\"display-4\">{differentArtists}</span> different artists\n        and <span className=\"display-4\">{differentTracks}</span> different tracks in your streaming history.\n        How many percents of all streams are your favourites responsible for?<br/>\n        Your music variety score is <span className=\"display-3\">{varietyArtists}</span> for artists and <span className=\"display-3\">{varietyTracks}</span> for tracks (out of 100)\n      </p>\n      <ResponsiveContainer width=\"100%\" height=\"50%\">\n        <LineChart\n          data={chartData}\n        >\n          <CartesianGrid strokeDasharray=\"5 5\" />\n          <XAxis dataKey=\"top\" />\n          <YAxis />\n          <Tooltip content={CustomTooltip} />\n          <Line type=\"monotone\" dataKey=\"Tracks\" stroke=\"#00d76f\" strokeWidth={5}  dot={false} />\n          <Line type=\"monotone\" dataKey=\"Artists\" stroke=\"#666666\" strokeWidth={5}  dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </React.Fragment >\n  );\n}\n\nconst CustomTooltip = ({ active, payload, label }: any) => {\n  if (active && payload) {\n    return (\n      <div className=\"custom-tooltip\">\n        <p className=\"desc\">Your top {payload[0].payload.top}% of artists is responsible for {payload[0].payload.Artists}% of all streams <br />\n          Your top {payload[0].payload.top}% of tracks is responsible for {payload[0].payload.Tracks}% of all streams\n        </p>\n      </div>\n    );\n  }\n\n  return null;\n};\n\nexport default Attachment;","import React, { useEffect, useState } from 'react';\nimport Dropzone from 'react-dropzone';\nimport Table from './Table';\nimport Chart from './Chart';\nimport Summary from './Summary';\nimport \"./Stats.css\";\nimport OtherUnits from './OtherUnits';\nimport Attachment from './Attachment';\nimport { from } from 'linq-to-typescript';\nimport { ListeningEntry } from '../models/listeningEntry';\nimport { StatsData, StatsProvider } from './StatsContext';\n\ninterface StatsProps {\n}\n\ninterface StatsState {\n  progress: number;\n  files: File[];\n  data: StatsData;\n}\n\nconst Stats: React.FC<StatsProps> = (props) => {\n\n  const [state, setState] = useState<StatsState>({\n    progress: 0,\n    files: [],\n    data: { listeningHistory: [], since: new Date(), to: new Date() }\n  });\n\n  useEffect(() => {\n    if (state.files.length === 0) return;\n\n    Promise.all(state.files.map(loadFile)).then(results => {\n      let entries = results.map(r => JSON.parse(r as string) as ListeningEntry[]).flat();\n      entries.forEach(x => x.date = new Date(x.endTime.replace(\" \", \"T\") + \":00.000Z\"));\n      let ordered = from(entries).orderBy(x => x.date.getTime()).groupBy(x => x.endTime + x.trackName).select(x => x.first());\n      entries = ordered.toArray();\n\n      setState(s => ({ ...s, progress: 2, data: { listeningHistory: entries, since: ordered.first().date, to: ordered.last().date } }));\n      let summary = document.getElementById('summary');\n      if (summary)\n        summary!.scrollIntoView()\n    })\n  }, [state.files]);\n\n  const loadFiles = (files: File[]) => {\n    const filesToLoad = files.filter(x => x.name.startsWith(\"StreamingHistory\"));\n    setState({ ...state, progress: 1, files: filesToLoad });\n  }\n\n  const loadFile = (file: File) => new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.onload = (e) => {\n      resolve(e.target?.result);\n    }\n    fileReader.onerror = fileReader.onabort = reject;\n    fileReader.readAsText(file);\n  });\n\n  return state.progress === 0\n    ? (\n      <section>\n        <Dropzone onDrop={loadFiles}>\n          {({ getRootProps, getInputProps }) => (\n            <div {...getRootProps({ className: 'dropzone' })}>\n              <input {...getInputProps()} />\n              <p>Drag and drop your StreamingHistory#.json files here, or click to select files</p>\n            </div>\n          )}\n        </Dropzone>\n      </section>\n    ) : state.progress === 1 ? (\n      <section id=\"otherUnits\">\n        <h2 className=\"text-center display-4\">Loading...</h2>\n      </section>\n    ) :\n      (\n        <React.Fragment>\n          <StatsProvider value={state.data}>\n            <section id=\"summary\">\n              <Summary />\n            </section>\n            <section id=\"otherUnits\">\n              <OtherUnits />\n            </section>\n            <section id=\"chart\">\n              <Chart description=\"Music over time\" />\n            </section>\n            <section id=\"table\">\n              <Table />\n            </section>\n            <section id=\"attachment\">\n              <Attachment />\n            </section>\n          </StatsProvider>\n        </React.Fragment>\n      );\n}\n\nStats.displayName = Stats.name;\n\nexport default Stats;\n","import React from 'react';\n\nconst About: React.FC = () => {\n    return (\n        <div>\n            <h1>About</h1>\n            <p>This app is made for fun and as a training. None of your data is stored, everything is processed locally. It is not related to Spotify AB or any of it´s partners in any way.</p>\n            <div>Icons made by <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\n        </div>\n    );\n\n}\n\nexport default About;","import React from 'react';\nimport './App.css';\nimport { Layout } from './components/Layout';\nimport { Route } from 'react-router';\nimport { Home } from './components/Home';\nimport Stats from './components/Stats';\nimport { HashRouter } from 'react-router-dom';\nimport About from './components/About';\n\nconst App: React.FC = () => {\n  const baseUrl = document.getElementsByTagName('base')[0].getAttribute('href') as string;\n\n  return (\n    <HashRouter basename={baseUrl}>\n      <Layout>\n        <Route exact path='/' component={Home} />\n        <Route path='/stats' component={Stats} />\n        <Route path='/about' component={About} />\n      </Layout>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './custom.scss';\nimport './dark.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}