{"version":3,"sources":["components/NavMenu.tsx","components/Layout.tsx","components/Home.tsx","components/Table.tsx","components/Chart.tsx","components/Stats.tsx","components/About.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NavMenu","props","toggleNavbar","bind","state","collapsed","this","setState","Navbar","className","light","Container","NavbarBrand","tag","Link","to","src","height","alt","NavbarToggler","onClick","Collapse","isOpen","navbar","NavItem","NavLink","Component","displayName","name","Layout","children","Home","href","target","rel","Table","tableFuncs","x","trackName","artistName","tableData","from","listeningHistory","groupBy","tableFuncId","select","first","playedTimes","count","totalListeningTime","Math","round","sum","msPlayed","toArray","Fragment","ButtonGroup","Button","active","color","data","columns","Header","accessor","filter","defaultSorted","id","desc","defaultPageSize","Chart","chartFuncs","getHours","getDay","getMonth","chartData","chartFuncId","Date","endTime","g","key","totalTime","totalPlaybacks","mostPlayedTrack","orderByDescending","mostPlayedArtist","width","margin","top","right","left","bottom","strokeDasharray","dataKey","content","CustomTooltip","type","stroke","payload","label","Stats","loadFiles","files","forEach","f","startsWith","fileReader","FileReader","onloadend","e","ls","JSON","parse","result","readAsText","length","onDrop","getRootProps","getInputProps","About","title","App","baseUrl","document","getElementsByTagName","getAttribute","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wZAaaA,G,OAAb,YAGE,WAAaC,GAAgC,IAAD,8BAC1C,4CAAMA,KAEDC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,MAAQ,CACXC,WAAW,GAL6B,EAH9C,4EAaIC,KAAKC,SAAS,CACZF,WAAYC,KAAKF,MAAMC,cAd7B,+BAmBI,OACE,gCACE,kBAACG,EAAA,EAAD,CAAQC,UAAU,+EAA+EC,OAAK,GACpG,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAaC,IAAKC,IAAMC,GAAG,KAAI,yBAAKC,IAAI,gBAAgBC,OAAO,OAAOC,IAAI,SAA1E,uBACA,kBAACC,EAAA,EAAD,CAAeC,QAASd,KAAKJ,aAAcO,UAAU,SACrD,kBAACY,EAAA,EAAD,CAAUZ,UAAU,uCAAuCa,QAAShB,KAAKF,MAAMC,UAAWkB,QAAM,GAC9F,wBAAId,UAAU,wBACZ,kBAACe,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASZ,IAAKC,IAAML,UAAU,YAAYM,GAAG,KAA7C,iBAEF,kBAACS,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASZ,IAAKC,IAAML,UAAU,YAAYM,GAAG,UAA7C,UAEF,kBAACS,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASZ,IAAKC,IAAML,UAAU,YAAYM,GAAG,UAA7C,mBAlClB,GAA6BW,cAAhB1B,EACJ2B,YAAc3B,EAAQ4B,KCVxB,IAAMC,EAAb,iLAII,OACE,6BACE,kBAAC,EAAD,MACA,kBAAClB,EAAA,EAAD,KACGL,KAAKL,MAAM6B,eARtB,GAA4BJ,aAAfG,EACJF,YAAcE,EAAOD,K,YCFjBG,EAAb,iLAII,OACE,6BACE,6CACA,wBAAItB,UAAU,gBACZ,qCAAU,uBAAGuB,KAAK,8CAA8CC,OAAO,SAASC,IAAI,uBAA1E,4BAAV,oBACA,2DACA,qDACA,sEACA,kDAAuB,qDAAvB,UAA2D,kBAAC,IAAD,CAAMnB,GAAG,UAAT,eAZrE,GAA0BW,aAAbK,EACJJ,YAAcI,EAAKH,K,iECYfO,G,OAAb,YAGE,WAAYlC,GAA4B,IAAD,8BACrC,4CAAMA,KAHRmC,WAAa,CAAC,SAACC,GAAD,OAAuBA,EAAEC,UAAYD,EAAEE,YAAY,SAACF,GAAD,OAAuBA,EAAEE,aAEnD,EAKvCC,UAAY,kBAAMC,eAAK,EAAKxC,MAAMyC,kBAAkBC,QAAQ,EAAKP,WAAW,EAAKhC,MAAMwC,cAAcC,QAAO,SAAAR,GAC1G,MAAO,CACLC,UAAWD,EAAES,QAAQR,UACrBC,WAAYF,EAAES,QAAQP,WACtBQ,YAAaV,EAAEW,QACfC,mBAAoBC,KAAKC,MAAMd,EAAEe,KAAI,SAAAf,GAAC,OAAIA,EAAEgB,YAAY,SAEzDC,WAVD,EAAKlD,MAAQ,CAAEwC,YAAa,GAFS,EAHzC,sEAiBY,IAAD,OACP,OACE,kBAAC,IAAMW,SAAP,KAEE,kBAACC,EAAA,EAAD,CAAa/C,UAAU,UACrB,kBAACgD,EAAA,EAAD,CAAQC,OAAmC,IAA3BpD,KAAKF,MAAMwC,YAAmBe,MAAM,UAAUvC,QAAS,kBAAM,EAAKb,SAAL,eAAmB,EAAKH,MAAxB,CAA+BwC,YAAa,OAAzH,oBACA,kBAACa,EAAA,EAAD,CAAQC,OAAmC,IAA3BpD,KAAKF,MAAMwC,YAAmBe,MAAM,UAAUvC,QAAS,kBAAM,EAAKb,SAAL,eAAmB,EAAKH,MAAxB,CAA+BwC,YAAa,OAAzH,sBAGF,kBAAC,IAAD,CACEgB,KAAMtD,KAAKkC,YACXqB,QAAS,CACP,CACEC,OAAQ,cACRC,SAAU,cAEZ,CACED,OAAQ,aACRC,SAAU,aAEZ,CACED,OAAQ,aACRC,SAAU,eAEZ,CACED,OAAQ,2BACRC,SAAU,uBAEZC,QAAO,SAAA3B,GAAC,OAA+B,IAA3B,EAAKjC,MAAMwC,aAA0C,cAAfP,EAAE0B,YACtDE,cAAe,CACb,CACEC,GAAI,cACJC,MAAM,IAGVC,gBAAiB,GACjB3D,UAAU,6BArDpB,GAA2BiB,c,QCDd2C,EAAb,YAGE,WAAYpE,GAA8B,IAAD,8BACvC,4CAAMA,KAHRqE,WAAa,CAAC,SAACjC,GAAD,OAAaA,EAAEkC,YAAY,SAAClC,GAAD,OAAaA,EAAEmC,SAAW,GAAG,SAACnC,GAAD,OAAaA,EAAEoC,WAAa,IAEzD,EAKzCC,UAAY,kBAAMjC,eAAK,EAAKxC,MAAMyC,kBAC/BC,SAAQ,SAAAN,GAAC,OAAI,EAAKiC,WAAW,EAAKlE,MAAMuE,aAAa,IAAIC,KAAKvC,EAAEwC,aAChEhC,QAAO,SAAAiC,GACN,MAAO,CACLlD,KAAMkD,EAAEC,IACRC,UAAW9B,KAAKC,MAAM2B,EAAE1B,KAAI,SAAAf,GAAC,OAAIA,EAAEgB,YAAY,KAC/C4B,eAAgBH,EAAE9B,QAClBkC,gBAAiBJ,EAAEnC,SAAQ,SAAAN,GAAC,OAAIA,EAAEC,aAAW6C,mBAAkB,SAAA9C,GAAC,OAAIA,EAAEW,WAASF,QAAQiC,IACvFK,iBAAkBN,EAAEnC,SAAQ,SAAAN,GAAC,OAAIA,EAAEE,cAAY4C,mBAAkB,SAAA9C,GAAC,OAAIA,EAAEW,WAASF,QAAQiC,QAG5FzB,WAdD,EAAKlD,MAAQ,CAAEuE,YAAa,GAFW,EAH3C,sEAqBY,IAAD,OACP,OACE,kBAAC,IAAMpB,SAAP,KACE,kBAACC,EAAA,EAAD,CAAa/C,UAAU,UACrB,kBAACgD,EAAA,EAAD,CAAQC,OAAmC,IAA3BpD,KAAKF,MAAMuE,YAAmBhB,MAAM,UAAUvC,QAAS,kBAAM,EAAKb,SAAL,eAAmB,EAAKH,MAAxB,CAA+BuE,YAAa,OAAzH,SACA,kBAAClB,EAAA,EAAD,CAAQC,OAAmC,IAA3BpD,KAAKF,MAAMuE,YAAmBhB,MAAM,UAAUvC,QAAS,kBAAM,EAAKb,SAAL,eAAmB,EAAKH,MAAxB,CAA+BuE,YAAa,OAAzH,gBACA,kBAAClB,EAAA,EAAD,CAAQC,OAAmC,IAA3BpD,KAAKF,MAAMuE,YAAmBhB,MAAM,UAAUvC,QAAS,kBAAM,EAAKb,SAAL,eAAmB,EAAKH,MAAxB,CAA+BuE,YAAa,OAAzH,WAGF,kBAAC,IAAD,CACEU,MAAO,KACPpE,OAAQ,IACR2C,KAAMtD,KAAKoE,YACXY,OAAQ,CACNC,IAAK,GAAIC,MAAO,GAAIC,KAAM,GAAIC,OAAQ,KAGxC,kBAAC,IAAD,CAAeC,gBAAgB,QAC/B,kBAAC,IAAD,CAAOC,QAAQ,SACf,kBAAC,IAAD,MACA,kBAAC,IAAD,CAASC,QAASC,IAClB,kBAAC,IAAD,CAAMC,KAAK,WAAWH,QAAQ,YAAYI,OAAO,kBA1C3D,GAA2BtE,aAgDrBoE,EAAgB,SAAC,GAAqC,IAAnCpC,EAAkC,EAAlCA,OAAQuC,EAA0B,EAA1BA,QAA0B,EAAjBC,MACxC,OAAIxC,GAAUuC,EAEV,yBAAKxF,UAAU,kBACb,uBAAGA,UAAU,SAAb,gCAA+CwF,EAAQ,GAAGA,QAAQjB,UAAlE,aACA,uBAAGvE,UAAU,QAAb,wBAA0CwF,EAAQ,GAAGA,QAAQhB,eAAe,6BAA5E,oBACoBgB,EAAQ,GAAGA,QAAQf,gBAAgB,6BADvD,qBAEqBe,EAAQ,GAAGA,QAAQb,iBAAiB,+BAMxD,MC/DIe,EAAb,YAGE,WAAYlG,GAA8B,IAAD,8BACvC,4CAAMA,KAIRmG,UAAY,SAACC,GACX,EAAK9F,SAAL,eAAmB,EAAKH,MAAxB,CAA+BsC,iBAAkB,MAAM,WACrD2D,EAAMC,SAAQ,SAAAC,GACZ,GAAKA,EAAE3E,KAAK4E,WAAW,oBAAvB,CAEA,IAAIC,EAAa,IAAIC,WACrBD,EAAWE,UAAY,SAACC,GACtB,IAAIC,EAAKC,KAAKC,MAAMN,EAAWO,QAAkBhD,QAAO,SAAC3B,GAAD,OAAuBA,EAAEgB,SAAW,KAAShB,EAAEgB,SAAW,OAClH,EAAK9C,SAAL,eAAmB,EAAKH,MAAxB,CAA+BsC,iBAAiB,GAAD,mBAAM,EAAKtC,MAAMsC,kBAAjB,YAAsCmE,QAGvFJ,EAAWQ,WAAWV,WAd1B,EAAKnG,MAAQ,CAAEsC,iBAAkB,IAFM,EAH3C,sEAyBI,OAA8C,IAAvCpC,KAAKF,MAAMsC,iBAAiBwE,OAE/B,kBAAC,IAAD,CAAUC,OAAQ7G,KAAK8F,YACpB,gBAAGgB,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,cAAjB,OACC,iCACE,wBAASD,EAAa,CAAE3G,UAAW,aACjC,0BAAW4G,KACX,kHAMR,kBAAC,IAAM9D,SAAP,KACE,kBAAC,EAAD,CAAOb,iBAAkBpC,KAAKF,MAAMsC,mBACpC,kBAAC,EAAD,CAAOA,iBAAkBpC,KAAKF,MAAMsC,wBAxC9C,GAA2BhB,aAAdyE,EACJxE,YAAcwE,EAAMvE,KCZ7B,IAWe0F,EAXS,WACpB,OACI,6BACI,qCACA,+MACA,8CAAmB,uBAAGtF,KAAK,2CAA2CuF,MAAM,WAAzD,WAAnB,SAAuG,uBAAGvF,KAAK,4BAA4BuF,MAAM,YAA1C,uBCgBpGC,EAdO,WACpB,IAAMC,EAAUC,SAASC,qBAAqB,QAAQ,GAAGC,aAAa,QAEtE,OACE,kBAAC,IAAD,CAAYC,SAAUJ,GACpB,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAOK,OAAK,EAACC,KAAK,IAAIC,UAAWjG,IACjC,kBAAC,IAAD,CAAOgG,KAAK,SAASC,UAAW7B,IAChC,kBAAC,IAAD,CAAO4B,KAAK,SAASC,UAAWV,OCLpBW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASb,SAASc,eAAe,SDoI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d3f12566.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport './NavMenu.css';\n\nexport interface NavMenuProps {\n\n}\n\nexport interface NavMenuState {\n  collapsed: boolean;\n}\n\nexport class NavMenu extends Component<NavMenuProps, NavMenuState> {\n  static displayName = NavMenu.name;\n\n  constructor (props: Readonly<NavMenuProps>) {\n    super(props);\n\n    this.toggleNavbar = this.toggleNavbar.bind(this);\n    this.state = {\n      collapsed: true\n    };\n  }\n\n  toggleNavbar () {\n    this.setState({\n      collapsed: !this.state.collapsed\n    });\n  }\n\n  render () {\n    return (\n      <header>\n        <Navbar className=\"navbar-expand-sm navbar-toggleable-sm ng-white border-bottom box-shadow mb-3\" light>\n          <Container>\n            <NavbarBrand tag={Link} to=\"/\"><img src='./logo192.png' height=\"40px\" alt=\"Logo\" /> Your Spotify Stats</NavbarBrand>\n            <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\n            <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={!this.state.collapsed} navbar>\n              <ul className=\"navbar-nav flex-grow\">\n                <NavItem>\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/\">Instructions</NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/stats\">Stats</NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/about\">About</NavLink>\n                </NavItem>\n              </ul>\n            </Collapse>\n          </Container>\n        </Navbar>\n      </header>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Container } from 'reactstrap';\nimport { NavMenu } from './NavMenu';\n\nexport class Layout extends Component {\n  static displayName = Layout.name;\n\n  render () {\n    return (\n      <div>\n        <NavMenu />\n        <Container>\n          {this.props.children}\n        </Container>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nexport class Home extends Component {\n  static displayName = Home.name;\n\n  render () {\n    return (\n      <div>\n        <h1>How to use it</h1>\n        <ol className=\"instructions\">\n          <li>Go to <a href=\"https://www.spotify.com/en/account/privacy/\" target=\"_blank\" rel=\"noopener noreferrer\">Spotify privacy settings</a> and scroll down</li>\n          <li>Request a copy of your data</li>\n          <li>Wait a couple of days</li>\n          <li>Check your inbox and download the data</li>\n          <li>Unzip and add your <i>StreamingHistory#.json</i> files <Link to=\"/stats\">HERE</Link></li>\n        </ol>\n      </div>\n    );\n  }\n}\n","import { Component } from \"react\";\nimport { ListeningEntry } from \"../models/listeningEntry\";\nimport { from } from \"linq-to-typescript\";\nimport React from \"react\";\nimport { ButtonGroup, Button } from \"reactstrap\";\nimport ReactTable from \"react-table-6\";\nimport \"react-table-6/react-table.css\";\n\nexport interface TabProps {\n  listeningHistory: ListeningEntry[];\n}\n\ninterface TabState {\n  tableFuncId: number;\n}\n\nexport class Table extends Component<TabProps, TabState> {\n  tableFuncs = [(x: ListeningEntry) => x.trackName + x.artistName, (x: ListeningEntry) => x.artistName]\n\n  constructor(props: Readonly<TabProps>) {\n    super(props);\n    this.state = { tableFuncId: 0 };\n  }\n\n  tableData = () => from(this.props.listeningHistory).groupBy(this.tableFuncs[this.state.tableFuncId]).select(x => {\n    return {\n      trackName: x.first().trackName,\n      artistName: x.first().artistName,\n      playedTimes: x.count(),\n      totalListeningTime: Math.round(x.sum(x => x.msPlayed) / 60000)\n    }\n  }).toArray();\n\n  render() {\n    return (\n      <React.Fragment>\n\n        <ButtonGroup className=\"d-flex\">\n          <Button active={this.state.tableFuncId === 0} color=\"primary\" onClick={() => this.setState({ ...this.state, tableFuncId: 0 })}>Favourite tracks</Button>\n          <Button active={this.state.tableFuncId === 1} color=\"primary\" onClick={() => this.setState({ ...this.state, tableFuncId: 1 })}>Favourite artists</Button>\n        </ButtonGroup>\n\n        <ReactTable\n          data={this.tableData()}\n          columns={[\n            {\n              Header: \"Artist Name\",\n              accessor: \"artistName\"\n            },\n            {\n              Header: \"Track Name\",\n              accessor: \"trackName\"\n            },\n            {\n              Header: \"Play Count\",\n              accessor: \"playedTimes\"\n            },\n            {\n              Header: \"Listening Time (minutes)\",\n              accessor: \"totalListeningTime\"\n            }\n          ].filter(x => this.state.tableFuncId === 0 ? true : x.accessor !== \"trackName\")}\n          defaultSorted={[\n            {\n              id: \"playedTimes\",\n              desc: true\n            }\n          ]}\n          defaultPageSize={20}\n          className=\"-striped -highlight\"\n        />\n      </React.Fragment>\n    )\n  }\n\n}","import { Component } from \"react\";\nimport React from \"react\";\nimport { ButtonGroup, Button } from \"reactstrap\";\nimport { LineChart, CartesianGrid, XAxis, YAxis, Line, Tooltip } from \"recharts\";\nimport { ListeningEntry } from \"../models/listeningEntry\";\nimport { from } from \"linq-to-typescript\";\n\nexport interface ChartProps {\n  listeningHistory: ListeningEntry[];\n}\n\ninterface ChartState {\n  chartFuncId: number;\n}\n\nexport class Chart extends Component<ChartProps, ChartState> {\n  chartFuncs = [(x: Date) => x.getHours(), (x: Date) => x.getDay() + 1, (x: Date) => x.getMonth() + 1]\n\n  constructor(props: Readonly<ChartProps>) {\n    super(props);\n    this.state = { chartFuncId: 0 };\n  }\n\n  chartData = () => from(this.props.listeningHistory)\n    .groupBy(x => this.chartFuncs[this.state.chartFuncId](new Date(x.endTime)))\n    .select(g => {\n      return {\n        name: g.key,\n        totalTime: Math.round(g.sum(x => x.msPlayed) / 60000),\n        totalPlaybacks: g.count(),\n        mostPlayedTrack: g.groupBy(x => x.trackName).orderByDescending(x => x.count()).first().key,\n        mostPlayedArtist: g.groupBy(x => x.artistName).orderByDescending(x => x.count()).first().key,\n      };\n    })\n    .toArray();\n\n  render() {\n    return (\n      <React.Fragment>\n        <ButtonGroup className=\"d-flex\">\n          <Button active={this.state.chartFuncId === 0} color=\"primary\" onClick={() => this.setState({ ...this.state, chartFuncId: 0 })} >Hours</Button>\n          <Button active={this.state.chartFuncId === 1} color=\"primary\" onClick={() => this.setState({ ...this.state, chartFuncId: 1 })}>Days of week</Button>\n          <Button active={this.state.chartFuncId === 2} color=\"primary\" onClick={() => this.setState({ ...this.state, chartFuncId: 2 })}>Months</Button>\n        </ButtonGroup>\n\n        <LineChart\n          width={1100}\n          height={500}\n          data={this.chartData()}\n          margin={{\n            top: 25, right: 20, left: 20, bottom: 50,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"5 5\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis />\n          <Tooltip content={CustomTooltip} />\n          <Line type=\"monotone\" dataKey=\"totalTime\" stroke=\"#8884d8\" />\n        </LineChart>\n      </React.Fragment >);\n  }\n}\n\nconst CustomTooltip = ({ active, payload, label }: any) => {\n  if (active && payload) {\n    return (\n      <div className=\"custom-tooltip\">\n        <p className=\"label\">{`Total listening time: ${payload[0].payload.totalTime} minutes`}</p>\n        <p className=\"desc\">Total tracks played: {payload[0].payload.totalPlaybacks}<br />\n          Favourite track: {payload[0].payload.mostPlayedTrack}<br />\n          Favourite artist: {payload[0].payload.mostPlayedArtist}<br />\n        </p>\n      </div>\n    );\n  }\n\n  return null;\n};\n","import React, { Component } from 'react';\nimport Dropzone from 'react-dropzone';\nimport { ListeningEntry } from '../models/listeningEntry';\nimport { Table } from './Table';\nimport { Chart } from './Chart';\n\nexport interface StatsProps {\n}\n\nexport interface StatsState {\n  listeningHistory: ListeningEntry[];\n}\n\nexport class Stats extends Component<StatsProps, StatsState> {\n  static displayName = Stats.name;\n\n  constructor(props: Readonly<StatsProps>) {\n    super(props);\n    this.state = { listeningHistory: [] };\n  }\n\n  loadFiles = (files: File[]) => {\n    this.setState({ ...this.state, listeningHistory: [] }, () => {\n      files.forEach(f => {\n        if (!f.name.startsWith(\"StreamingHistory\")) return;\n\n        let fileReader = new FileReader();\n        fileReader.onloadend = (e) => {\n          let ls = JSON.parse(fileReader.result as string).filter((x: ListeningEntry) => x.msPlayed > 60000 && x.msPlayed < 600000);\n          this.setState({ ...this.state, listeningHistory: [...this.state.listeningHistory, ...ls] });\n        }\n\n        fileReader.readAsText(f);\n      });\n    });\n  }\n\n  render() {\n    return this.state.listeningHistory.length === 0\n      ? (\n        <Dropzone onDrop={this.loadFiles}>\n          {({ getRootProps, getInputProps }) => (\n            <section>\n              <div {...getRootProps({ className: 'dropzone' })}>\n                <input {...getInputProps()} />\n                <p>Drag and drop your StreamingHistory#.json files here, or click to select files</p>\n              </div>\n            </section>\n          )}\n        </Dropzone>\n      ) : (\n        <React.Fragment>\n          <Chart listeningHistory={this.state.listeningHistory} />\n          <Table listeningHistory={this.state.listeningHistory} />\n        </React.Fragment>\n      );\n  }\n}\n","import React from 'react';\n\nconst About: React.FC = () => {\n    return (\n        <div>\n            <h1>About</h1>\n            <p>This app is made for fun and as a training. None of your data is stored, everything is processed locally. It is not related to Spotify AB or any of it´s partners in any way.</p>\n            <div>Icons made by <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\n        </div>\n    );\n\n}\n\nexport default About;","import React from 'react';\nimport './App.css';\nimport { Layout } from './components/Layout';\nimport { Route } from 'react-router';\nimport { Home } from './components/Home';\nimport { Stats } from './components/Stats';\nimport { HashRouter } from 'react-router-dom';\nimport About from './components/About';\n\nconst App: React.FC = () => {\n  const baseUrl = document.getElementsByTagName('base')[0].getAttribute('href') as string;\n\n  return (\n    <HashRouter basename={baseUrl}>\n      <Layout>\n        <Route exact path='/' component={Home} />\n        <Route path='/stats' component={Stats} />\n        <Route path='/about' component={About} />\n      </Layout>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}