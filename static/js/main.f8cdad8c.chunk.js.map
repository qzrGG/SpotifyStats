{"version":3,"sources":["components/NavMenu.tsx","components/Layout.tsx","components/Home.tsx","components/Stats.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NavMenu","props","toggleNavbar","bind","state","collapsed","this","setState","Navbar","className","light","Container","NavbarBrand","tag","Link","to","NavbarToggler","onClick","Collapse","isOpen","navbar","NavItem","NavLink","Component","displayName","name","Layout","children","Home","Stats","loadFiles","files","listeningEntries","forEach","f","startsWith","fileReader","FileReader","onloadend","e","ls","JSON","parse","result","readAsText","songsData","from","groupBy","x","trackName","artistName","select","first","playedTimes","count","totalListeningTime","Math","round","sum","msPlayed","toArray","artistsData","chartData","chartFunc","Date","endTime","g","key","totalTime","totalPlaybacks","mostPlayedTrack","orderByDescending","mostPlayedArtist","changeChartFunc","target","value","getHours","getDay","getDate","getMonth","onDrop","getRootProps","getInputProps","ButtonGroup","Button","color","width","height","data","margin","top","right","left","bottom","strokeDasharray","dataKey","content","CustomTooltip","type","stroke","columns","Header","accessor","defaultSorted","id","desc","defaultPageSize","active","payload","label","console","log","App","baseUrl","document","getElementsByTagName","getAttribute","basename","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f8cdad8c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport './NavMenu.css';\n\nexport interface NavMenuProps {\n\n}\n\nexport interface NavMenuState {\n  collapsed: boolean;\n}\n\nexport class NavMenu extends Component<NavMenuProps, NavMenuState> {\n  static displayName = NavMenu.name;\n\n  constructor (props: Readonly<NavMenuProps>) {\n    super(props);\n\n    this.toggleNavbar = this.toggleNavbar.bind(this);\n    this.state = {\n      collapsed: true\n    };\n  }\n\n  toggleNavbar () {\n    this.setState({\n      collapsed: !this.state.collapsed\n    });\n  }\n\n  render () {\n    return (\n      <header>\n        <Navbar className=\"navbar-expand-sm navbar-toggleable-sm ng-white border-bottom box-shadow mb-3\" light>\n          <Container>\n            <NavbarBrand tag={Link} to=\"/\">SpotifyStats</NavbarBrand>\n            <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\n            <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={!this.state.collapsed} navbar>\n              <ul className=\"navbar-nav flex-grow\">\n                <NavItem>\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/\">Home</NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/stats\">Stats</NavLink>\n                </NavItem>\n              </ul>\n            </Collapse>\n          </Container>\n        </Navbar>\n      </header>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Container } from 'reactstrap';\nimport { NavMenu } from './NavMenu';\n\nexport class Layout extends Component {\n  static displayName = Layout.name;\n\n  render () {\n    return (\n      <div>\n        <NavMenu />\n        <Container>\n          {this.props.children}\n        </Container>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\n\nexport class Home extends Component {\n  static displayName = Home.name;\n\n  render () {\n    return (\n      <div>\n        <h1>Spotify Stats</h1>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport ReactDropzone from 'react-dropzone';\n\nimport { ListeningEntry } from '../models/listeningEntry';\nimport ReactTable from \"react-table-6\";\nimport \"react-table-6/react-table.css\";\nimport { from } from \"linq-to-typescript\"\nimport {\n  LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\nimport { ButtonGroup, Button } from 'reactstrap';\n\nexport interface StatsProps {\n}\n\nexport interface StatsState {\n  listeningEntries: ListeningEntry[];\n  chartFunc: (date: Date) => number | string;\n}\n\nexport class Stats extends Component<StatsProps, StatsState> {\n  static displayName = Stats.name;\n\n  constructor(props: Readonly<StatsProps>) {\n    super(props);\n    this.state = { listeningEntries: [], chartFunc: x => x.getHours() };\n  }\n\n  loadFiles = (files: File[]) => {\n    this.setState({ ...this.state, listeningEntries: [] }, () => {\n      files.forEach(f => {\n        if (!f.name.startsWith(\"StreamingHistory\")) return;\n\n        let fileReader = new FileReader();\n        fileReader.onloadend = (e) => {\n          let ls = JSON.parse(fileReader.result as string);\n          this.setState({ ...this.state, listeningEntries: [...this.state.listeningEntries, ...ls] });\n        }\n\n        fileReader.readAsText(f);\n      });\n    });\n  }\n\n  songsData = () => from(this.state.listeningEntries).groupBy(x => x.trackName + x.artistName).select(x => {\n    return {\n      trackName: x.first().trackName,\n      artistName: x.first().artistName,\n      playedTimes: x.count(),\n      totalListeningTime: Math.round(x.sum(x => x.msPlayed) / 60000)\n    }\n  }).toArray();\n\n  artistsData = () => from(this.state.listeningEntries).groupBy(x => x.artistName).select(x => {\n    return {\n      artistName: x.first().artistName,\n      playedTimes: x.count(),\n      totalListeningTime: Math.round(x.sum(x => x.msPlayed) / 60000)\n    }\n  }).toArray();\n\n  chartData = () => from(this.state.listeningEntries)\n    .groupBy(x => this.state.chartFunc(new Date(x.endTime)))\n    .select(g => {\n      return {\n        name: g.key,\n        totalTime: Math.round(g.sum(x => x.msPlayed) / 60000),\n        totalPlaybacks: g.count(),\n        mostPlayedTrack: g.groupBy(x => x.trackName).orderByDescending(x => x.count()).first().key,\n        mostPlayedArtist: g.groupBy(x => x.artistName).orderByDescending(x => x.count()).first().key,\n      };\n    })\n\n    .toArray();\n\n  changeChartFunc = (x: any) => {\n    const type = x.target.value;\n    switch (type) {\n      case \"Hours\": this.setState({ ... this.state, chartFunc: x => x.getHours() }); break;\n      case \"Days of week\": this.setState({ ... this.state, chartFunc: x => x.getDay() }); break;\n      case \"Weeks\": this.setState({ ... this.state, chartFunc: x => x.getDate() }); break;//todo\n      case \"Months\": this.setState({ ... this.state, chartFunc: x => x.getMonth() }); break;\n    }\n  }\n  render() {\n    return (\n      <div>\n        <h1>Stats</h1>\n\n        <ReactDropzone onDrop={this.loadFiles}>\n          {({ getRootProps, getInputProps }) => (\n            <section>\n              <div {...getRootProps()}>\n                <input {...getInputProps()} />\n                <p>Drag 'n' drop some files here, or click to select files</p>\n              </div>\n            </section>\n          )}\n        </ReactDropzone>\n\n        <ButtonGroup>\n          <Button color=\"primary\" onClick={() => this.setState({ ... this.state, chartFunc: x => x.getHours() })} >Hours</Button>\n          <Button color=\"primary\" onClick={() => this.setState({ ... this.state, chartFunc: x => x.getDay() + 1 })}>Days of week</Button>\n          <Button color=\"primary\" onClick={() => this.setState({ ... this.state, chartFunc: x => x.getMonth() + 1 })}>Months</Button>\n        </ButtonGroup>\n        {/* <div onChange={this.changeChartFunc}>\n                <input type=\"radio\" value=\"Hours\" name=\"type\" /> Hours\n          <input type=\"radio\" value=\"Days of week\" name=\"type\" />\n                <input type=\"radio\" value=\"Weeks\" name=\"type\" />\n                <input type=\"radio\" value=\"Months\" name=\"type\" />\n\n              </div> */}\n        <LineChart\n          width={1100}\n          height={500}\n          data={this.chartData()}\n          margin={{\n            top: 5, right: 30, left: 20, bottom: 5,\n          }}\n        >\n          <CartesianGrid strokeDasharray=\"5 5\" />\n          <XAxis dataKey=\"name\" />\n          <YAxis />\n          <Tooltip content={CustomTooltip} />\n          <Legend />\n          <Line type=\"monotone\" dataKey=\"totalTime\" stroke=\"#8884d8\" />\n        </LineChart>\n        <ReactTable\n          data={this.songsData()}\n          columns={[\n\n            {\n              Header: \"artistName\",\n              accessor: \"artistName\"\n            },\n            {\n              Header: \"trackName\",\n              accessor: \"trackName\"\n            },\n            {\n              Header: \"playedTimes\",\n              accessor: \"playedTimes\"\n            },\n            {\n              Header: \"totalListeningTime minutes\",\n              accessor: \"totalListeningTime\"\n            }\n\n\n          ]}\n          defaultSorted={[\n            {\n              id: \"playedTimes\",\n              desc: true\n            }\n          ]}\n          defaultPageSize={20}\n          className=\"-striped -highlight table\"\n        />\n\n        <ReactTable\n          data={this.artistsData()}\n          columns={[\n\n            {\n              Header: \"artistName\",\n              accessor: \"artistName\"\n            },\n            {\n              Header: \"playedTimes\",\n              accessor: \"playedTimes\"\n            },\n            {\n              Header: \"totalListeningTime minutes\",\n              accessor: \"totalListeningTime\"\n            }\n\n\n          ]}\n          defaultSorted={[\n            {\n              id: \"playedTimes\",\n              desc: true\n            }\n          ]}\n          defaultPageSize={20}\n          className=\"-striped -highlight table\"\n        />\n\n      </div>\n    );\n  }\n}\n\n\nconst CustomTooltip = ({ active, payload, label }: any) => {\n  if (active && payload) {\n    console.log(payload);\n    return (\n      <div className=\"custom-tooltip\">\n        <p className=\"label\">{`Total listening time: ${payload[0].payload.totalTime} minutes`}</p>\n        <p className=\"desc\">Total tracks played: {payload[0].payload.totalPlaybacks}<br />\n          Favourite track: {payload[0].payload.mostPlayedTrack}<br />\n          Favourite artist: {payload[0].payload.mostPlayedArtist}<br />\n        </p>\n      </div>\n    );\n  }\n\n  return null;\n};\n\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Layout } from './components/Layout';\nimport { Route } from 'react-router';\nimport { Home } from './components/Home';\nimport { Stats } from './components/Stats';\nimport { BrowserRouter } from 'react-router-dom';\n\nconst App: React.FC = () => {\n  const baseUrl = document.getElementsByTagName('base')[0].getAttribute('href') as string;\n\n  return (\n    <BrowserRouter basename={baseUrl}>\n      <Layout>\n        <Route exact path='/' component={Home} />\n        <Route path='/stats' component={Stats} />\n      </Layout>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}