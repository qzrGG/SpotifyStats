{"version":3,"sources":["components/NavMenu.tsx","components/Layout.tsx","components/Home.tsx","models/Comparer.ts","common/math.helper.ts","components/Table.tsx","components/Ranking.tsx","components/Chart.tsx","components/Summary.tsx","components/OtherUnits.tsx","components/Attachment.tsx","components/Stats.tsx","components/About.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NavMenu","props","toggleNavbar","setState","collapsed","state","toggleDarkMode","checked","isDarkModeEnabled","element","document","body","classList","add","remove","window","matchMedia","matches","this","Navbar","className","light","Container","NavbarBrand","tag","Link","to","src","height","alt","NavbarToggler","onClick","Collapse","isOpen","navbar","NavItem","style","marginTop","onChange","checkedIcon","icon","faMoon","marginLeft","onColor","uncheckedIcon","faSun","NavLink","Component","displayName","name","Layout","children","Home","href","target","rel","Comparer","x","y","round","precision","Math","pow","minutes","timeInMinutes","hours","floor","seconds","toString","padStart","TableType","Ranking","listRef","React","createRef","useEffect","current","scrollTo","data","CustomScrollbars","onScroll","forwardedRef","refSetter","useCallback","scrollbarsRef","view","ref","overflow","CustomScrollbarsVirtualList","forwardRef","itemCount","length","itemSize","width","outerElementType","index","_","row","onSubsetChanged","columns","map","selector","header","areEqual","prevProps","nextProps","memo","Chart","chartFuncs","getHours","getDay","monthValue","daysOfWeek","xAxisFuncs","date","getFullYear","getMonth","monthDiff","d1","d2","months","nthMonth","n","firstDate","Date","since","nthDate","setMonth","emptyData","range","select","totalTime","totalPlaybacks","mostPlayedTrack","mostPlayedArtist","toArray","chartData","from","listeningHistory","groupBy","chartFuncId","g","key","sum","msPlayed","count","trackName","orderByDescending","first","take","artistName","union","Fragment","description","ButtonGroup","size","Button","active","color","ResponsiveContainer","LineChart","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","content","CustomTooltip","Line","type","stroke","strokeWidth","payload","label","Table","useState","tableType","trackAndArtist","searchPhrase","orderByColumn","descendingOrder","scrollPosition","listeningHistorySubset","subsetDescription","result","artistOnly","groupByProperty","t","thenByDescending","i","id","playedTimes","totalListeningTime","entries","where","toLowerCase","indexOf","orderBy","reverse","s","typeChanged","flex","display","placeholder","borderRadius","e","value","column","Summary","totalPlayCount","differentTracks","distinct","differentArtists","top10TracksPlayCount","top10ArtistsPlayCount","summary","totalListeningTimeMinutes","totalListeningTimeSummary","top10tracksShare","top10artistsShare","fontSize","toLocaleDateString","OtherUnits","fontWeight","top","Artists","Tracks","Attachment","topTracksPlayCount","aggregate","Array","push","topArtistsPlayCount","varietyArtists","datapoint","varietyTracks","dot","Stats","loadFiles","files","filesToLoad","filter","startsWith","progress","Promise","all","loadFile","then","results","r","JSON","parse","flat","forEach","endTime","replace","ordered","getTime","last","getElementById","scrollIntoView","file","resolve","reject","fileReader","FileReader","onload","onerror","onabort","readAsText","onDrop","getRootProps","getInputProps","About","title","App","baseUrl","getElementsByTagName","getAttribute","basename","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.48a0b334.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Collapse, Container, Navbar, NavbarBrand, NavbarToggler, NavItem, NavLink } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport Switch from \"react-switch\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faSun, faMoon } from '@fortawesome/free-solid-svg-icons'\nimport './NavMenu.css';\n\nexport interface NavMenuProps {\n\n}\n\nexport interface NavMenuState {\n  collapsed: boolean;\n  isDarkModeEnabled: boolean;\n}\n\nexport class NavMenu extends Component<NavMenuProps, NavMenuState> {\n  static displayName = NavMenu.name;\n\n  constructor (props: Readonly<NavMenuProps>) {\n    super(props);\n\n    this.state = {\n      collapsed: true,\n      isDarkModeEnabled: false\n    };\n  }\n\n  componentDidMount() {\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      this.toggleDarkMode(true);\n    }\n  }\n\n  toggleNavbar = () => {\n    this.setState({\n      collapsed: !this.state.collapsed\n    });\n  }\n\n  toggleDarkMode = (checked: boolean) => {\n    this.setState({ isDarkModeEnabled: checked}, () => {\n      const element = document.body;\n      if (checked) {\n        element.classList.add(\"dark-mode\");\n      }\n      else {\n        element.classList.remove(\"dark-mode\");\n      }\n    });\n  }\n\n  render () {\n    return (\n      <header>\n        <Navbar className=\"navbar-expand-sm navbar-toggleable-sm ng-white border-bottom box-shadow mb-3\" light>\n          <Container>\n            <NavbarBrand tag={Link} to=\"/\"><img src='./logo192.png' height=\"40px\" alt=\"Logo\" /> Your Spotify Stats</NavbarBrand>\n            <NavbarToggler onClick={this.toggleNavbar} className=\"mr-2\" />\n            <Collapse className=\"d-sm-inline-flex flex-sm-row-reverse\" isOpen={!this.state.collapsed} navbar>\n              <ul className=\"navbar-nav flex-grow\">\n                <NavItem style={{marginTop: 8}}>\n                  <Switch checked={this.state.isDarkModeEnabled} onChange={this.toggleDarkMode} height={26} \n                  checkedIcon={<FontAwesomeIcon icon={faMoon} style={{marginLeft: 5}}/>} onColor=\"#33c17d\" uncheckedIcon={<FontAwesomeIcon icon={faSun} style={{marginLeft: 10}}/>}/>\n                </NavItem>\n                <NavItem>\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/\">Instructions</NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/stats\">Stats</NavLink>\n                </NavItem>\n                <NavItem>\n                  <NavLink tag={Link} className=\"text-dark\" to=\"/about\">About</NavLink>\n                </NavItem>\n              </ul>\n            </Collapse>\n          </Container>\n        </Navbar>\n      </header>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Container } from 'reactstrap';\nimport { NavMenu } from './NavMenu';\n\nexport class Layout extends Component {\n  static displayName = Layout.name;\n\n  render () {\n    return (\n      <div>\n        <NavMenu />\n        <Container>\n          {this.props.children}\n        </Container>\n      </div>\n    );\n  }\n}\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nexport class Home extends Component {\n  static displayName = Home.name;\n\n  render () {\n    return (\n      <div>\n        <h1>How to use it</h1>\n        <ol className=\"instructions\">\n          <li>Go to <a href=\"https://www.spotify.com/account/privacy/\" target=\"_blank\" rel=\"noopener noreferrer\">Spotify privacy settings</a> and scroll down</li>\n          <li>Request a copy of your data</li>\n          <li>Wait a couple of days</li>\n          <li>Check your inbox and download the data</li>\n          <li>Unzip and add your <i>StreamingHistory#.json</i> files <Link to=\"/stats\">HERE</Link></li>\n        </ol>\n      </div>\n    );\n  }\n}\n","const Comparer = (x: number, y: number): number => {\n  return x < y ? -1 : x === y ? 0 : 1;\n}\n\nexport default Comparer;","export function round(x: number, precision: number): number {\n    return (Math.round(x * Math.pow(10, precision)) / Math.pow(10, precision));\n}\n\nexport function minutes(timeInMinutes: number): string {\n    const hours = Math.floor(timeInMinutes / 60);\n    const minutes = Math.floor(timeInMinutes) - hours * 60;\n    const seconds = Math.round((timeInMinutes - hours * 60 - minutes) * 60);\n    if (hours > 0)\n        return `${hours}:${minutes.toString().padStart(2, \"0\")}:${seconds.toString().padStart(2, \"0\")}`;\n    else\n        return `${minutes}:${seconds.toString().padStart(2, \"0\")}`;\n    \n}","import { from } from \"linq-to-typescript\";\nimport React, { useState, useEffect } from \"react\";\nimport { ButtonGroup, Button } from \"reactstrap\";\nimport \"./Table.css\";\nimport Comparer from \"../models/Comparer\";\nimport { minutes, round } from \"../common/math.helper\";\nimport { StatRow } from \"../models/StatRow\";\nimport Ranking from \"./Ranking\";\nimport { ListeningEntry } from \"../models/listeningEntry\";\nimport { Chart } from \"./Chart\";\n\ninterface TabProps {\n  listeningHistory: ListeningEntry[];\n  since: Date;\n  to: Date;\n}\n\ninterface TabState {\n  tableType: TableType;\n  searchPhrase: string;\n  orderByColumn: number;\n  descendingOrder: boolean;\n  scrollPosition: number;\n  data: StatRow[];\n  listeningHistorySubset: ListeningEntry[];\n  subsetDescription: string;\n}\n\nenum TableType {\n  trackAndArtist = 0,\n  artistOnly = 1\n}\n\nconst Table: React.FC<TabProps> = (props) => {\n  const [state, setState] = useState<TabState>({\n    tableType: TableType.trackAndArtist,\n    searchPhrase: \"\",\n    orderByColumn: 0,\n    descendingOrder: false,\n    scrollPosition: 0,\n    data: [],\n    listeningHistorySubset: [],\n    subsetDescription: \"\"\n  });\n\n  const groupByProperty = (type: TableType): ((x: ListeningEntry) => string) => {\n    switch (type) {\n      case TableType.trackAndArtist:\n        return x => `${x.trackName}|${x.artistName}`;\n      case TableType.artistOnly:\n        return x => x.artistName;\n    }\n  }\n\n  useEffect(() => {\n    let result = from(props.listeningHistory)\n      .groupBy(groupByProperty(state.tableType))\n      .select(x => ({ x, count: x.count(), sum: x.sum(t => t.msPlayed) }))\n      .orderByDescending(x => x.count, Comparer)\n      .thenByDescending(x => x.sum)\n      .select(({ x, count, sum }, i) => {\n        return {\n          id: i + 1,\n          trackName: x.first().trackName,\n          artistName: x.first().artistName,\n          playedTimes: count,\n          totalListeningTime: round(sum / 60000, 2),\n          entries: x.toArray()\n        }\n      })\n      .where(x => x.artistName.toLowerCase().indexOf(state.searchPhrase) > -1\n        || (state.tableType === TableType.trackAndArtist && x.trackName.toLowerCase().indexOf(state.searchPhrase) > -1)\n      );\n\n    switch (state.orderByColumn) {\n      case 0: result = result.orderBy(x => x.id, Comparer); break;\n      case 1: result = result.orderBy(x => x.trackName); break;\n      case 2: result = result.orderBy(x => x.artistName); break;\n      case 3: result = result.orderBy(x => x.id, Comparer); break;\n      case 4: result = result.orderBy(x => x.totalListeningTime, Comparer); break;\n    }\n\n    if (state.descendingOrder)\n      result = result.reverse();\n\n    setState(s => ({ ...s, data: result.toArray() }));\n  }, [props.listeningHistory, state.descendingOrder, state.orderByColumn, state.searchPhrase, state.tableType]);\n\n  const orderByChanged = (column: number) => {\n    if (state.orderByColumn === column)\n      setState({ ...state, descendingOrder: !state.descendingOrder });\n    else\n      setState({ ...state, descendingOrder: false, orderByColumn: column });\n  }\n\n  const typeChanged = (type: TableType) => setState({ ...state, tableType: type, orderByColumn: 0, descendingOrder: false });\n\n  const onRowSelected = (row: StatRow) => {\n    const description = state.tableType === TableType.artistOnly ? row.artistName : `${row.trackName} by ${row.artistName}`;\n    setState({ ...state, listeningHistorySubset: row.entries, subsetDescription: description });\n  }\n\n  const onSearchedTextChanged = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setState({ ...state, searchPhrase: e.target.value.toLowerCase() });\n  }\n\n  const columns = [{\n    header: \"#\",\n    selector: (x: StatRow) => x.id,\n    style: { flex: 1 }\n  }, {\n    header: \"Track\",\n    selector: (x: StatRow) => x.trackName,\n    style: { flex: 10, display: state.tableType === TableType.trackAndArtist ? \"table-cell \" : \"none\" },\n  }, {\n    header: \"Artist\",\n    selector: (x: StatRow) => x.artistName,\n    style: { flex: 10 }\n  }, {\n    header: \"Streams\",\n    selector: (x: StatRow) => x.playedTimes,\n    style: { flex: 2 }\n  }, {\n    header: \"Time\",\n    selector: (x: StatRow) => minutes(x.totalListeningTime),\n    style: { flex: 3 }\n  }, {\n    header: \"Earnings ($)\",\n    selector: (x: StatRow) => round(x.playedTimes * 0.004, 2),\n    style: { flex: 2, display: state.tableType === TableType.artistOnly ? \"table-cell \" : \"none\" }\n  }];\n\n  return (\n    <React.Fragment>\n      <div className=\"d-flex align-items-center mb-2\">\n        <div style={{ flex: 1 }}>\n          <span className=\"section-header\">Your favourites</span>\n        </div>\n        <div style={{ flex: 1 }}>\n          <input type=\"text\" className=\"form-control\" placeholder=\"Search\" style={{ borderRadius: 50 }}\n            onChange={onSearchedTextChanged}\n          />\n          <span>Items in total: {state.data.length}</span>\n        </div>\n      </div>\n\n      <ButtonGroup className=\"d-flex mb-3\" size=\"md\">\n        <Button active={state.tableType === TableType.trackAndArtist} color=\"primary\" onClick={() => typeChanged(TableType.trackAndArtist)}>Favourite tracks</Button>\n        <Button active={state.tableType === TableType.artistOnly} color=\"primary\" onClick={() => typeChanged(TableType.artistOnly)}>Favourite artists</Button>\n      </ButtonGroup>\n\n      <div className=\"data-header\">\n        {columns.map((x, i) => (\n          <div key={i} className={\"data-cell\" + (state.orderByColumn === i ? \" order-by\" : \"\")} style={x.style} onClick={() => orderByChanged(i)}>{x.header}</div>\n        ))}\n      </div>\n\n      <Ranking data={state.data} columns={columns} onSubsetChanged={onRowSelected} />\n      <Chart listeningHistory={state.listeningHistorySubset} description={`Details for ${state.subsetDescription}`} since={props.since} to={props.to} />\n\n    </React.Fragment>\n  );\n}\n\nexport default Table;","import { useCallback, useEffect } from \"react\";\nimport React from \"react\";\nimport { FixedSizeList } from \"react-window\";\nimport \"./Table.css\";\nimport { StatColumn, StatRow } from \"../models/StatRow\";\nimport Scrollbars from \"react-custom-scrollbars-2\";\n\ninterface RankingProps {\n  onSubsetChanged: (subset: StatRow) => void;\n  data: StatRow[];\n  columns: StatColumn[];\n}\n\nconst Ranking: React.FC<RankingProps> = (props) => {\n  const listRef = React.createRef<FixedSizeList>();\n\n  useEffect(() => {\n    listRef.current?.scrollTo(0);\n  }, [props.data, listRef]);\n\n  const onRowSelected = (row: StatRow) => {\n    props.onSubsetChanged(row);\n  }\n\n  const Row = ({ index, style }: any) => (\n    <div className=\"d-flex stats-row\" style={style} onClick={_ => onRowSelected(props.data[index])}>\n      {props.columns.map((x) => (\n        <div key={x.header} style={x.style} className=\"data-cell\">{x.selector(props.data[index])}</div>\n      ))}\n    </div>\n  );\n\n  const CustomScrollbars = ({ onScroll, forwardedRef, style, children }: any) => {\n    const refSetter = useCallback(scrollbarsRef => {\n      if (scrollbarsRef) {\n        forwardedRef(scrollbarsRef.view);\n      } else {\n        forwardedRef(null);\n      }\n    }, [forwardedRef]);\n\n    return (\n      <Scrollbars\n        ref={refSetter}\n        style={{ ...style, overflow: \"hidden\" }}\n        onScroll={onScroll}\n      >\n        {children}\n      </Scrollbars>\n    );\n  };\n\n  const CustomScrollbarsVirtualList = React.forwardRef((props, ref) => (\n    <CustomScrollbars {...props} forwardedRef={ref} />\n  ));\n\n  return (\n    <div className=\"data-items mb-2\">\n      <FixedSizeList\n        height={400}\n        itemCount={props.data.length}\n        itemSize={40}\n        width=\"100%\"\n        outerElementType={CustomScrollbarsVirtualList}\n        ref={listRef}\n      >\n        {Row}\n      </FixedSizeList>\n    </div>\n  );\n}\n\nconst areEqual = (prevProps: RankingProps, nextProps: RankingProps): boolean => {\n  return prevProps.data === nextProps.data;\n }\n\nexport default React.memo(Ranking, areEqual);","import { Component } from \"react\";\nimport React from \"react\";\nimport { ButtonGroup, Button } from \"reactstrap\";\nimport { LineChart, CartesianGrid, XAxis, YAxis, Line, Tooltip, ResponsiveContainer } from \"recharts\";\nimport { ListeningEntry } from \"../models/listeningEntry\";\nimport { from, range } from \"linq-to-typescript\";\nimport Comparer from \"../models/Comparer\";\nimport { minutes, round } from \"../common/math.helper\";\n\nexport interface ChartProps {\n  listeningHistory: ListeningEntry[];\n  description: string;\n  since: Date;\n  to: Date;\n}\n\ninterface ChartState {\n  chartFuncId: number;\n}\n\nexport class Chart extends Component<ChartProps, ChartState> {\n  chartFuncs: ((x: Date) => number)[] = [\n    x => x.getHours(),\n    x => x.getDay() === 0 ? 7 : x.getDay(),\n    x => this.monthValue(x)\n  ];\n\n  daysOfWeek: string[] = [\"Sun\", \"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"];\n  xAxisFuncs: ((x: { name: number }) => string)[] = [\n    x => x.name.toString().padStart(2, '0'),\n    x => this.daysOfWeek[x.name],\n    x => `${(x.name % 100).toString().padStart(2, '0')}.${Math.floor(x.name / 100)-2000}`\n  ];\n\n  constructor(props: Readonly<ChartProps>) {\n    super(props);\n    this.state = { chartFuncId: 0 };\n  }\n\n  monthValue = (date: Date): number => date.getFullYear() * 100 + date.getMonth() + 1;\n\n  monthDiff = (d1: Date, d2: Date) => {\n    let months = 0;\n    months = (d2.getFullYear() - d1.getFullYear()) * 12;\n    months -= d1.getMonth();\n    months += d2.getMonth();\n    return months <= 0 ? 0 : months;\n}\n\n  nthMonth = (n: number): number => {\n    const firstDate = new Date(this.props.since);\n    const nthDate = new Date(firstDate.setMonth(firstDate.getMonth() + n));\n    return this.monthValue(nthDate);\n  }\n\n  emptyData: {name: number, totalTime: number, totalPlaybacks: number, mostPlayedTrack: string, mostPlayedArtist: string}[][] = [\n    range(0, 24).select(x => ({name: x, totalTime: 0, totalPlaybacks: 0, mostPlayedTrack: \"\", mostPlayedArtist: \"\"})).toArray(),\n    range(1, 7).select(x => ({name: x, totalTime: 0, totalPlaybacks: 0, mostPlayedTrack: \"\", mostPlayedArtist: \"\"})).toArray(),\n    range(0, this.monthDiff(this.props.since, this.props.to)).select(x => ({name: this.nthMonth(x), totalTime: 0, totalPlaybacks: 0, mostPlayedTrack: \"\", mostPlayedArtist: \"\"})).toArray()\n  ];\n\n\n  chartData = () => from(this.props.listeningHistory)\n    .groupBy(x => this.chartFuncs[this.state.chartFuncId](x.date))\n    .select(g => ({\n      name: g.key,\n      totalTime: round(g.sum(x => x.msPlayed) / 60000, 2),\n      totalPlaybacks: g.count(),\n      mostPlayedTrack: g.groupBy(x => x.trackName).orderByDescending(x => x.count(), Comparer).first().take(1).select(x => `${x.trackName} by ${x.artistName}`).first(),\n      mostPlayedArtist: g.groupBy(x => x.artistName).orderByDescending(x => x.count(), Comparer).first().key\n    }))\n    .union(this.emptyData[this.state.chartFuncId])\n    .groupBy(x => x.name)\n    .select(x => x.first())\n    .toArray();\n\n  render() {\n    if (this.props.listeningHistory == null || this.props.listeningHistory.length === 0) {\n      return (<p>Select a track or an artist in the table to see it's details</p>);\n    } \n    return (\n      <React.Fragment>\n        <span className=\"section-header mb-3\">{this.props.description}</span>\n        \n        <ButtonGroup className=\"d-flex mb-3\" size=\"md\">\n          <Button active={this.state.chartFuncId === 0} color=\"primary\" onClick={() => this.setState({ chartFuncId: 0 })}>Hours</Button>\n          <Button active={this.state.chartFuncId === 1} color=\"primary\" onClick={() => this.setState({ chartFuncId: 1 })}>Days of week</Button>\n          <Button active={this.state.chartFuncId === 2} color=\"primary\" onClick={() => this.setState({ chartFuncId: 2 })}>Months</Button>\n        </ButtonGroup>\n        <ResponsiveContainer width=\"100%\" height=\"70%\">\n          <LineChart\n            data={this.chartData()}\n          >\n            <CartesianGrid strokeDasharray=\"5 5\" />\n            <XAxis dataKey={this.xAxisFuncs[this.state.chartFuncId]} />\n            <YAxis />\n            <Tooltip content={CustomTooltip} />\n            <Line type=\"monotone\" dataKey=\"totalTime\" stroke=\"#00d76f\" strokeWidth={5} />\n          </LineChart>\n        </ResponsiveContainer>\n      </React.Fragment >);\n  }\n}\n\nconst CustomTooltip = ({ active, payload, label }: any) => {\n  if (active && payload && payload[0].payload.totalTime > 0) {\n    return (\n      <div className=\"custom-tooltip\">\n        <p className=\"label\">{`Total listening time: ${minutes(payload[0].payload.totalTime)}`}</p>\n        <p className=\"desc\">Total tracks played: {payload[0].payload.totalPlaybacks}<br />\n          Favourite track: {payload[0].payload.mostPlayedTrack}<br />\n          Favourite artist: {payload[0].payload.mostPlayedArtist}<br />\n        </p>\n      </div>\n    );\n  }\n\n  return null;\n};\n","import React from \"react\";\nimport { ListeningEntry } from \"../models/listeningEntry\";\nimport { from } from \"linq-to-typescript\";\nimport Comparer from \"../models/Comparer\";\n\nconst Summary: React.FC<{ listeningHistory: ListeningEntry[], since: Date, to: Date }> = (props) => {\n  const data = from(props.listeningHistory);\n\n  const totalListeningTime = Math.round(data.sum(x => x.msPlayed) / 60000);\n  const totalPlayCount = data.count();\n\n  const differentTracks = data.select(x => x.artistName + x.trackName).distinct().count();\n  const differentArtists = data.select(x => x.artistName).distinct().count();\n\n  const top10TracksPlayCount = data.groupBy(x => x.trackName + x.artistName)\n    .select(x => x.count())\n    .orderByDescending(x => x, Comparer)\n    .take(Math.round(differentTracks / 10))\n    .sum();\n\n  const top10ArtistsPlayCount = data.groupBy(x => x.artistName)\n    .select(x => x.count())\n    .orderByDescending(x => x)\n    .take(Math.round(differentArtists / 10))\n    .sum();\n\n  const summary = {\n    totalListeningTimeMinutes: totalListeningTime,\n    totalListeningTimeSummary: `${Math.floor(totalListeningTime / 1440)} days, ${Math.floor(totalListeningTime / 60 % 24)} hours and ${Math.floor(totalListeningTime % 60)} minutes`,\n    totalPlayCount: totalPlayCount,\n    differentTracks: differentTracks,\n    differentArtists: differentArtists,\n    top10tracksShare: top10TracksPlayCount / totalPlayCount,\n    top10artistsShare: top10ArtistsPlayCount / totalPlayCount,\n  };\n\n  return (\n    <React.Fragment>\n      <span className=\"section-header mb-3\">Summary</span>\n\n      <p className=\"text-center\" style={{fontSize: \"large\"}}>\n        Since {props.since.toLocaleDateString()} to {props.to.toLocaleDateString()} you've listened to <br />\n        <span className=\"display-4\">{summary.totalPlayCount} tracks</span>  <br />\n        for a total of <br /><span className=\"display-4\">{summary.totalListeningTimeMinutes} minutes</span>  <br />\n        or <span className=\"display-4\"> {summary.totalListeningTimeSummary}</span>.\n      </p>\n    </React.Fragment >\n  );\n}\n\nexport default Summary;","import React from \"react\";\nimport { ListeningEntry } from \"../models/listeningEntry\";\nimport { from } from \"linq-to-typescript\";\nimport { round } from \"../common/math.helper\";\n\nconst OtherUnits: React.FC<{ listeningHistory: ListeningEntry[] }> = (props) => {\n  const data = from(props.listeningHistory);\n\n  const totalListeningTime = data.sum(x => x.msPlayed) / 60000;\n\n  return (\n    <div style={{fontSize: \"x-large\", fontWeight: 300}}>\n      <span className=\"section-header mb-4\">In other words...</span>\n      <p>{round(totalListeningTime, 0)} minutes is a lot. In this time</p>\n      <ul>\n        <li>you can listen {round(totalListeningTime / 47, 1)} times to The Beatles's <i>Abbey Road</i> album</li>\n        <li>you can watch <i>The Lord of the Rings</i> trilogy {round(totalListeningTime / 725, 1)} times</li>\n        <li>light travels {round(totalListeningTime * 17987547.48, 0)} kilometers</li>\n        <li>on average {round(totalListeningTime * 250, 0)} babies are born</li>\n      </ul>\n      <p>If you have a healthy 8 hours of sleep a day you've spent {round(totalListeningTime / 3504, 2)}% of last year's awake time listening to music.</p>\n    </div>\n  );\n}\n\nexport default OtherUnits;","import React from \"react\";\nimport { ListeningEntry } from \"../models/listeningEntry\";\nimport { from } from \"linq-to-typescript\";\nimport { ResponsiveContainer, LineChart, CartesianGrid, XAxis, YAxis, Line, Tooltip } from \"recharts\";\nimport Comparer from \"../models/Comparer\";\nimport { round } from \"../common/math.helper\";\n\nconst Attachment: React.FC<{ listeningHistory: ListeningEntry[] }> = (props) => {\n  const data = from(props.listeningHistory);\n\n  const totalPlayCount = data.count();\n\n  const differentTracks = data.select(x => x.artistName + x.trackName).distinct().count();\n  const differentArtists = data.select(x => x.artistName).distinct().count();\n\n  const topTracksPlayCount = data.groupBy(x => x.trackName + x.artistName)\n    .select(x => x.count())\n    .orderByDescending(x => x, Comparer)\n    .aggregate({ result: Array.from([0]), i: 0 }, (x, y) => {\n      if (x.i * 100 >= x.result.length * differentTracks)\n        x.result.push(y + x.result[x.result.length - 1]);\n      else\n        x.result[x.result.length - 1] += y;\n      x.i++;\n      return x;\n    }).result;\n\n  let topArtistsPlayCount = data.groupBy(x => x.artistName)\n    .select(x => x.count())\n    .orderByDescending(x => x, Comparer)\n    .aggregate({ result: Array.from([0]), i: 0 }, (x, y) => {\n      if (x.i * 100 >= x.result.length * differentArtists)\n        x.result.push(y + x.result[x.result.length - 1]);\n      else\n        x.result[x.result.length - 1] += y;\n      x.i++;\n      return x;\n    }).result;\n    topArtistsPlayCount = [0, ...topArtistsPlayCount];\n  const chartData = [0, ...topTracksPlayCount].map((x, i) => ({ top: i, Tracks: Math.round(x / totalPlayCount * 10000) / 100, Artists: Math.round(topArtistsPlayCount[i] / totalPlayCount * 10000) / 100}));\n  const varietyArtists = round(from(chartData).aggregate(5000, (sum, datapoint) => sum -= (datapoint.Artists - datapoint.top))/50, 2);\n  const varietyTracks = round(from(chartData).aggregate(5000, (sum, datapoint) => sum -= (datapoint.Tracks - datapoint.top))/50, 2);\n\n  return (\n    <React.Fragment>\n      <span className=\"section-header mb-4\">Music variety</span>\n\n      <p className=\"text-center\" style={{ fontSize: \"large\" }}>\n        There are <span className=\"display-4\">{differentArtists}</span> different artists\n        and <span className=\"display-4\">{differentTracks}</span> different tracks in your streaming history.\n        How many percents of all streams are your favourites responsible for?<br/>\n        Your music variety score is <span className=\"display-3\">{varietyArtists}</span> for artists and <span className=\"display-3\">{varietyTracks}</span> for tracks (out of 100)\n      </p>\n      <ResponsiveContainer width=\"100%\" height=\"50%\">\n        <LineChart\n          data={chartData}\n        >\n          <CartesianGrid strokeDasharray=\"5 5\" />\n          <XAxis dataKey=\"top\" />\n          <YAxis />\n          <Tooltip content={CustomTooltip} />\n          <Line type=\"monotone\" dataKey=\"Tracks\" stroke=\"#00d76f\" strokeWidth={5}  dot={false} />\n          <Line type=\"monotone\" dataKey=\"Artists\" stroke=\"#666666\" strokeWidth={5}  dot={false} />\n        </LineChart>\n      </ResponsiveContainer>\n    </React.Fragment >\n  );\n}\n\nconst CustomTooltip = ({ active, payload, label }: any) => {\n  if (active && payload) {\n    return (\n      <div className=\"custom-tooltip\">\n        <p className=\"desc\">Your top {payload[0].payload.top}% of artists is responsible for {payload[0].payload.Artists}% of all streams <br />\n          Your top {payload[0].payload.top}% of tracks is responsible for {payload[0].payload.Tracks}% of all streams\n        </p>\n      </div>\n    );\n  }\n\n  return null;\n};\n\nexport default Attachment;","import React, { Component } from 'react';\nimport Dropzone from 'react-dropzone';\nimport Table from './Table';\nimport { Chart } from './Chart';\nimport Summary from './Summary';\nimport \"./Stats.css\";\nimport OtherUnits from './OtherUnits';\nimport Attachment from './Attachment';\nimport { from } from 'linq-to-typescript';\nimport { ListeningEntry } from '../models/listeningEntry';\n\nexport interface StatsProps {\n}\n\nexport interface StatsState {\n  listeningHistory: ListeningEntry[];\n  since: Date;\n  to: Date;\n  progress: number;\n}\n\nexport class Stats extends Component<StatsProps, StatsState> {\n  static displayName = Stats.name;\n\n  constructor(props: Readonly<StatsProps>) {\n    super(props);\n    this.state = {\n      listeningHistory: [],\n      progress: 0, \n      since: new Date(), \n      to: new Date()\n    };\n  }\n\n  loadFiles = (files: File[]) => {\n    const filesToLoad = files.filter(x => x.name.startsWith(\"StreamingHistory\"));\n    this.setState({ progress: 1 }, () =>\n      Promise.all(filesToLoad.map(this.loadFile)).then(results => {\n        let entries = results.map(r => JSON.parse(r as string) as ListeningEntry[]).flat();\n        entries.forEach(x => x.date = new Date(x.endTime.replace(\" \", \"T\") + \":00.000Z\"));\n        let ordered = from(entries).orderBy(x => x.date.getTime()).groupBy(x => x.endTime + x.trackName).select(x => x.first());\n        entries = ordered.toArray();\n\n        this.setState({ listeningHistory: entries, progress: 2, since: ordered.first().date, to: ordered.last().date });\n        let summary = document.getElementById('summary');\n        if (summary)\n          summary!.scrollIntoView()\n      }));\n  }\n\n  loadFile = (file: File) => new Promise((resolve, reject) => {\n    const fileReader = new FileReader();\n    fileReader.onload = (e) => {\n      resolve(e.target?.result);\n    }\n    fileReader.onerror = fileReader.onabort = reject;\n    fileReader.readAsText(file);\n  });\n\n  render() {\n    return this.state.progress === 0\n      ? (\n        <section>\n          <Dropzone onDrop={this.loadFiles}>\n            {({ getRootProps, getInputProps }) => (\n              <div {...getRootProps({ className: 'dropzone' })}>\n                <input {...getInputProps()} />\n                <p>Drag and drop your StreamingHistory#.json files here, or click to select files</p>\n              </div>\n            )}\n          </Dropzone>\n        </section>\n      ) : this.state.progress === 1 ? (\n        <h2 className=\"text-center display-4\">Loading...</h2>\n      ) :\n        (\n          <React.Fragment>\n            <section id=\"summary\">\n              <Summary listeningHistory={this.state.listeningHistory} since={this.state.since} to={this.state.to} />\n            </section>\n            <section id=\"otherUnits\">\n              <OtherUnits listeningHistory={this.state.listeningHistory} />\n            </section>\n            <section id=\"chart\">\n              <Chart listeningHistory={this.state.listeningHistory} description=\"Music over time\" since={this.state.since} to={this.state.to} />\n            </section>\n            <section id=\"table\">\n              <Table listeningHistory={this.state.listeningHistory} since={this.state.since} to={this.state.to} />\n            </section>\n            <section id=\"attachment\">\n              <Attachment listeningHistory={this.state.listeningHistory} />\n            </section>\n          </React.Fragment>\n        );\n  }\n}\n","import React from 'react';\n\nconst About: React.FC = () => {\n    return (\n        <div>\n            <h1>About</h1>\n            <p>This app is made for fun and as a training. None of your data is stored, everything is processed locally. It is not related to Spotify AB or any of it´s partners in any way.</p>\n            <div>Icons made by <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\n        </div>\n    );\n\n}\n\nexport default About;","import React from 'react';\nimport './App.css';\nimport { Layout } from './components/Layout';\nimport { Route } from 'react-router';\nimport { Home } from './components/Home';\nimport { Stats } from './components/Stats';\nimport { HashRouter } from 'react-router-dom';\nimport About from './components/About';\n\nconst App: React.FC = () => {\n  const baseUrl = document.getElementsByTagName('base')[0].getAttribute('href') as string;\n\n  return (\n    <HashRouter basename={baseUrl}>\n      <Layout>\n        <Route exact path='/' component={Home} />\n        <Route path='/stats' component={Stats} />\n        <Route path='/about' component={About} />\n      </Layout>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './custom.scss';\nimport './dark.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}